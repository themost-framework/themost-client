!function(Q){function g(B){if(I[B])return I[B].exports;var C=I[B]={i:B,l:!1,exports:{}};return Q[B].call(C.exports,C,C.exports,g),C.l=!0,C.exports}var I={};g.m=Q,g.c=I,g.d=function(Q,I,B){g.o(Q,I)||Object.defineProperty(Q,I,{configurable:!1,enumerable:!0,get:B})},g.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return g.d(I,"a",I),I},g.o=function(Q,g){return Object.prototype.hasOwnProperty.call(Q,g)},g.p="",g(g.s=2)}([function(module,exports){eval("module.exports = angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYW5ndWxhclwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar CodedError = /** @class */ (function (_super) {\r\n    __extends(CodedError, _super);\r\n    function CodedError(message, code) {\r\n        var _newTarget = this.constructor;\r\n        var _this = _super.call(this, message) || this;\r\n        _this.code = code;\r\n        //set prototype for a class that extends Error in typescript\r\n        _this["__proto__"] = _newTarget.prototype;\r\n        return _this;\r\n    }\r\n    return CodedError;\r\n}(Error));\r\nexports.CodedError = CodedError;\r\nvar ResponseError = /** @class */ (function (_super) {\r\n    __extends(ResponseError, _super);\r\n    function ResponseError(message, statusCode) {\r\n        var _newTarget = this.constructor;\r\n        var _this = _super.call(this, message) || this;\r\n        _this.statusCode = statusCode;\r\n        //set prototype for a class that extends Error in typescript\r\n        _this["__proto__"] = _newTarget.prototype;\r\n        return _this;\r\n    }\r\n    return ResponseError;\r\n}(Error));\r\nexports.ResponseError = ResponseError;\r\nvar Base64 = /** @class */ (function () {\r\n    function Base64() {\r\n        this.PADCHAR = \'=\';\r\n        this.ALPHA = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\r\n    }\r\n    Base64.prototype.getByte = function (s, i) {\r\n        var x = s.charCodeAt(i);\r\n        return x;\r\n    };\r\n    Base64.prototype.getByte64 = function (s, i) {\r\n        var idx = this.ALPHA.indexOf(s.charAt(i));\r\n        return idx;\r\n    };\r\n    Base64.prototype.decode = function (s) {\r\n        var pads = 0, i, b10, imax = s.length, x = [];\r\n        s = String(s);\r\n        if (imax === 0) {\r\n            return s;\r\n        }\r\n        if (s.charAt(imax - 1) === this.PADCHAR) {\r\n            pads = 1;\r\n            if (s.charAt(imax - 2) === this.PADCHAR) {\r\n                pads = 2;\r\n            }\r\n            imax -= 4;\r\n        }\r\n        for (i = 0; i < imax; i += 4) {\r\n            b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6) | this.getByte64(s, i + 3);\r\n            x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255, b10 & 255));\r\n        }\r\n        switch (pads) {\r\n            case 1:\r\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6);\r\n                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255));\r\n                break;\r\n            case 2:\r\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12);\r\n                x.push(String.fromCharCode(b10 >> 16));\r\n                break;\r\n        }\r\n        return x.join(\'\');\r\n    };\r\n    Base64.prototype.encode = function (s) {\r\n        s = String(s);\r\n        var i, b10, x = [], imax = s.length - s.length % 3;\r\n        if (s.length === 0) {\r\n            return s;\r\n        }\r\n        for (i = 0; i < imax; i += 3) {\r\n            b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8) | this.getByte(s, i + 2);\r\n            x.push(this.ALPHA.charAt(b10 >> 18));\r\n            x.push(this.ALPHA.charAt((b10 >> 12) & 63));\r\n            x.push(this.ALPHA.charAt((b10 >> 6) & 63));\r\n            x.push(this.ALPHA.charAt(b10 & 63));\r\n        }\r\n        switch (s.length - imax) {\r\n            case 1:\r\n                b10 = this.getByte(s, i) << 16;\r\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.PADCHAR + this.PADCHAR);\r\n                break;\r\n            case 2:\r\n                b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8);\r\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.ALPHA.charAt((b10 >> 6) & 63) + this.PADCHAR);\r\n                break;\r\n        }\r\n        return x.join(\'\');\r\n    };\r\n    return Base64;\r\n}());\r\nexports.Base64 = Base64;\r\nvar TextUtils = /** @class */ (function () {\r\n    function TextUtils() {\r\n    }\r\n    TextUtils.isNotEmptyString = function (s) {\r\n        return (s != null) && (s != undefined) && (s.length > 0);\r\n    };\r\n    TextUtils.isNullOrUndefined = function (s) {\r\n        return (s != null) && (s != undefined);\r\n    };\r\n    TextUtils.zeroPad = function (num, length) {\r\n        num = num || 0;\r\n        var res = num.toString();\r\n        while (res.length < length) {\r\n            res = \'0\' + res;\r\n        }\r\n        return res;\r\n    };\r\n    TextUtils.isDate = function (s) {\r\n        if (typeof s === "string") {\r\n            return TextUtils.REG_DATETIME_ISO.test(s);\r\n        }\r\n        return false;\r\n    };\r\n    TextUtils.isGuid = function (s) {\r\n        if (typeof s === "string") {\r\n            return TextUtils.REG_GUID_STRING.test(s);\r\n        }\r\n        return false;\r\n    };\r\n    TextUtils.isAbsoluteURI = function (s) {\r\n        if (typeof s === "string") {\r\n            return TextUtils.REG_ABSOLUTE_URI.test(s);\r\n        }\r\n        return false;\r\n    };\r\n    TextUtils.isRelativeURI = function (s) {\r\n        if (typeof s === "string") {\r\n            return TextUtils.REG_RELATIVE_URI.test(s);\r\n        }\r\n        return false;\r\n    };\r\n    TextUtils.isNumber = function (s) {\r\n        if (typeof s === "string") {\r\n            return TextUtils.REG_NUMBER_STRING.test(s);\r\n        }\r\n        else if (typeof s === \'number\') {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TextUtils.parseDate = function (s) {\r\n        if (TextUtils.isDate(s)) {\r\n            return new Date(s);\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Encodes the given string to Base-64 format\r\n     * @param {string} s - A string to encode\r\n     * @returns {string}\r\n     */\r\n    TextUtils.toBase64 = function (s) {\r\n        var cv = new Base64();\r\n        return cv.encode(s);\r\n    };\r\n    /**\r\n     * Decodes the given string from Base-64 format\r\n     * @param {string} s - A base-64 encoded string\r\n     * @returns {string}\r\n     */\r\n    TextUtils.fromBase64 = function (s) {\r\n        var cv = new Base64();\r\n        return cv.decode(s);\r\n    };\r\n    TextUtils.format = function (s) {\r\n        var p = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            p[_i - 1] = arguments[_i];\r\n        }\r\n        var i = 0;\r\n        return s.replace(/%[sdfj%]/g, function (x) {\r\n            if (x === "%%")\r\n                return "%";\r\n            if (i >= p.length)\r\n                return x;\r\n            var p1 = p[i++];\r\n            if (((p1 == null) && (p1 == undefined))) {\r\n                return "";\r\n            }\r\n            switch (x) {\r\n                case "%s":\r\n                    return p1.toString();\r\n                case "%d":\r\n                    return parseInt(p1);\r\n                case "%f":\r\n                    return parseFloat(p1);\r\n                case "%j":\r\n                    return JSON.stringify(p1);\r\n                default:\r\n                    return x;\r\n            }\r\n        });\r\n    };\r\n    TextUtils.escape = function (val) {\r\n        if ((val == null) || (val == undefined)) {\r\n            return "null";\r\n        }\r\n        if (typeof val === \'boolean\') {\r\n            return (val) ? "true" : "false";\r\n        }\r\n        if (typeof val === \'number\') {\r\n            return val + "";\r\n        }\r\n        if (val instanceof Date) {\r\n            var dt = val;\r\n            var year = dt.getFullYear();\r\n            var month = TextUtils.zeroPad(dt.getMonth() + 1, 2);\r\n            var day = TextUtils.zeroPad(dt.getDate(), 2);\r\n            var hour = TextUtils.zeroPad(dt.getHours(), 2);\r\n            var minute = TextUtils.zeroPad(dt.getMinutes(), 2);\r\n            var second = TextUtils.zeroPad(dt.getSeconds(), 2);\r\n            var millisecond = TextUtils.zeroPad(dt.getMilliseconds(), 3);\r\n            //format timezone\r\n            var offset = (new Date()).getTimezoneOffset(), timezone = (offset >= 0 ? \'+\' : \'\') + TextUtils.zeroPad(Math.floor(offset / 60), 2) + \':\' + TextUtils.zeroPad(offset % 60, 2);\r\n            return "\'" + year + \'-\' + month + \'-\' + day + \' \' + hour + \':\' + minute + \':\' + second + \'.\' + millisecond + timezone + "\'";\r\n        }\r\n        if (val instanceof Array) {\r\n            var values_1 = [];\r\n            val.forEach(function (x) {\r\n                values_1.push(TextUtils.escape(x));\r\n            });\r\n            return values_1.join(\',\');\r\n        }\r\n        if (typeof val === "string") {\r\n            var res = val.replace(/[\\0\\n\\r\\b\\t\\\\\'"\\x1a]/g, function (s) {\r\n                switch (s) {\r\n                    case "\\0": return "\\\\0";\r\n                    case "\\n": return "\\\\n";\r\n                    case "\\r": return "\\\\r";\r\n                    case "\\b": return "\\\\b";\r\n                    case "\\t": return "\\\\t";\r\n                    case "\\x1a": return "\\\\Z";\r\n                    default: return "\\\\" + s;\r\n                }\r\n            });\r\n            return "\'" + res + "\'";\r\n        }\r\n        //otherwise get valueOf\r\n        if (val.hasOwnProperty("$name"))\r\n            return val["$name"];\r\n        else\r\n            return TextUtils.escape(val.valueOf());\r\n    };\r\n    TextUtils.REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\r\n    TextUtils.REG_GUID_STRING = /^(\\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\\}{0,1})$/;\r\n    TextUtils.REG_ABSOLUTE_URI = /^((https?|ftps?):\\/\\/)([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;\r\n    TextUtils.REG_RELATIVE_URI = /^([\\/\\w .-]*)*\\/?$/;\r\n    TextUtils.REG_NUMBER_STRING = /^\\d+$/;\r\n    return TextUtils;\r\n}());\r\nexports.TextUtils = TextUtils;\r\nvar Args = /** @class */ (function () {\r\n    function Args() {\r\n    }\r\n    Args.check = function (expr, message, code) {\r\n        if (!expr) {\r\n            throw new CodedError(message, code || "EARG");\r\n        }\r\n    };\r\n    Args.notNull = function (obj, name) {\r\n        Args.check((obj != null) && (obj !== undefined), name + " may not be null or undefined", "ENULL");\r\n    };\r\n    Args.notEmpty = function (obj, name) {\r\n        Args.check((obj != null) && (obj !== undefined) && (obj.length > 0), name + " may not be empty", "ENULL");\r\n    };\r\n    Args.notNegative = function (obj, name) {\r\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\r\n        Args.check((obj >= 0), name + " may not be negative", "ENUMBER");\r\n    };\r\n    Args.Positive = function (obj, name) {\r\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\r\n        Args.check((obj > 0), name + " must be a positive number", "ENUMBER");\r\n    };\r\n    return Args;\r\n}());\r\nexports.Args = Args;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar angular = __webpack_require__(0);\r\nvar services_1 = __webpack_require__(3);\r\nvar ngModule = angular.module('most', [services_1.default]);\r\nfunction localized(text, localeSet) {\r\n    window[\"locales\"] = window[\"locales\"] || {};\r\n    localeSet = localeSet || 'global';\r\n    if (typeof text !== 'string')\r\n        return text;\r\n    if (text.length === 0)\r\n        return text;\r\n    var locale = window[\"locales\"][localeSet];\r\n    if (locale) {\r\n        var out = locale[text];\r\n        if (out)\r\n            return out;\r\n    }\r\n    return text;\r\n}\r\nfunction MostLocalizedDirective() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.title)\r\n                element.attr('title', localized(attrs.title, attrs['mostLoc']));\r\n            if (attrs.placeholder)\r\n                element.attr('placeholder', localized(attrs.placeholder, attrs['mostLoc']));\r\n        }\r\n    };\r\n}\r\nfunction MostLocalizedHtmlDirective() {\r\n    return {\r\n        restrict: 'A',\r\n        scope: false,\r\n        link: function (scope, element, attrs) {\r\n            var text = localized(element.html(), attrs['mostLocHtml']);\r\n            if (text)\r\n                element.html(text);\r\n        }\r\n    };\r\n}\r\nfunction MostLocalizedFilter() {\r\n    return function (input, localeSet) {\r\n        return localized(input, localeSet);\r\n    };\r\n}\r\nfunction MostEventDirective($timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            //get event name\r\n            var name = element.attr('name') || attrs['event'], action = attrs['eventAction'];\r\n            if (name) {\r\n                scope.$on(name, function (event, args) {\r\n                    if (action) {\r\n                        $timeout(function () {\r\n                            scope.$args = args;\r\n                            try {\r\n                                scope.$apply(action);\r\n                            }\r\n                            catch (e) {\r\n                                console.log(e);\r\n                            }\r\n                            scope.$args = null;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @return {IDirective}\r\n * @constructor\r\n */\r\nfunction MostWatchDirective() {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            //get event name\r\n            var name = element.attr('name') || attrs['event'], args = attrs['eventArgs'];\r\n            if (name) {\r\n                if (typeof scope.$broadcast === 'function') {\r\n                    scope.$watch(args, function (value) {\r\n                        scope.$broadcast(name, value);\r\n                    });\r\n                }\r\n                else {\r\n                    scope.$watch(args, function (value) {\r\n                        scope.$emit(name, value);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction MostItemDirective($window) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: false,\r\n        link: function (scope, element, attrs) {\r\n            scope.route = $window.route;\r\n            var item = scope.$eval(attrs['mostItem']);\r\n            item.then(function (result) {\r\n                scope.item = result;\r\n            }, function (reason) {\r\n                console.log(reason);\r\n                scope.item = null;\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction MostVariableDirective($timeout) {\r\n    return {\r\n        restrict: 'E',\r\n        link: function (scope, element, attrs) {\r\n            if (attrs.ngValue) {\r\n                return scope.$eval(attrs.name + \"=\" + attrs.ngValue + \";\");\r\n            }\r\n            function set_(value) {\r\n                if (scope.$$phase === '$digest' || scope.$$phase === '$apply') {\r\n                    $timeout(function () {\r\n                        scope[attrs.name] = value;\r\n                    });\r\n                }\r\n                else {\r\n                    scope[attrs.name] = value;\r\n                }\r\n            }\r\n            scope.$watch(attrs.value, function (newValue) {\r\n                set_(newValue);\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction MostParamDirective($window) {\r\n    return {\r\n        restrict: 'AE',\r\n        link: function (scope, element, attrs) {\r\n            scope.route = $window.route;\r\n            if (attrs['mostParam']) {\r\n                var values = attrs['mostParam'].split(';');\r\n                var params = {};\r\n                for (var i = 0; i < values.length; i++) {\r\n                    var value = values[i].split('=');\r\n                    if (value.length === 2)\r\n                        params[value[0]] = value[1];\r\n                }\r\n                $window.route = $window.route || {};\r\n                var _loop_1 = function (name_1) {\r\n                    if (params.hasOwnProperty(name_1)) {\r\n                        scope.$watch(params[name_1], function (newValue) {\r\n                            $window.route[name_1] = newValue;\r\n                        });\r\n                    }\r\n                };\r\n                for (var name_1 in params) {\r\n                    _loop_1(name_1);\r\n                }\r\n            }\r\n            else {\r\n                scope.$watch(attrs.value, function (newValue) {\r\n                    $window.route = $window.route || {};\r\n                    $window.route[attrs.name] = newValue;\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction MostDataInstanceDirective($context, $parse, $window) {\r\n    return {\r\n        restrict: 'E',\r\n        scope: { model: '@', filter: '@', select: '@', group: '@', order: '@', top: '=', count: '=', skip: '=', expand: '@', prepared: '=', url: '@' },\r\n        link: function (scope, element, attrs) {\r\n            if (typeof scope.model === 'undefined')\r\n                return;\r\n            scope.route = $window.route;\r\n            var q = $context.model(scope.model).asQueryable();\r\n            var arr = [];\r\n            if (typeof scope.url === 'string' && scope.url.length > 0) {\r\n                q.setUrl(scope.url);\r\n            }\r\n            //apply select (if any)\r\n            if (scope.select) {\r\n                arr = scope.select.split(',');\r\n                //apply as array expression if we have only one field\r\n                if (arr.length == 1)\r\n                    q.asArray(true);\r\n                q.select(arr);\r\n            }\r\n            if (scope.group) {\r\n                if (angular.isArray(scope.group))\r\n                    q.group(scope.group);\r\n                else if (typeof scope.group === 'string' && scope.group.length > 0)\r\n                    q.group(scope.group.split(','));\r\n            }\r\n            if (scope.order) {\r\n                arr = [];\r\n                if (typeof scope.order === 'string' && scope.order.length > 0)\r\n                    arr = scope.order.split(',');\r\n                for (var i = 0; i < arr.length; i++) {\r\n                    var str = arr[i];\r\n                    var matches = /(.*?) desc$/i.exec(str);\r\n                    if (matches) {\r\n                        q.orderByDescending(matches[1]);\r\n                    }\r\n                    else {\r\n                        matches = /(.*?) asc$/i.exec(str);\r\n                        if (matches) {\r\n                            q.orderBy(matches[1]);\r\n                        }\r\n                        else {\r\n                            q.orderBy(str);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (scope.skip > 0) {\r\n                q.skip(scope.skip);\r\n            }\r\n            if (scope.top > 0) {\r\n                q.take(scope.top);\r\n            }\r\n            if (scope.count) {\r\n                q.paged(true);\r\n            }\r\n            if (typeof scope.filter === 'string' && scope.filter.length > 0) {\r\n                q.filter(scope.filter);\r\n                if (scope.prepared) {\r\n                    q.prepare();\r\n                }\r\n            }\r\n            if (typeof scope.expand === 'string' && scope.expand.length > 0) {\r\n                q.expand(scope.expand.split(','));\r\n            }\r\n            //set queryable\r\n            q.getItems().then(function (result) {\r\n                var getter = $parse(attrs.name);\r\n                var setter;\r\n                if (getter)\r\n                    setter = getter.assign;\r\n                if (typeof setter === 'function') {\r\n                    setter(scope.$parent, (q.$top === 1) ? result[0] : result);\r\n                }\r\n            });\r\n            //register for order change\r\n            scope.$on('order.change', function (event, args) {\r\n                if (typeof args === 'string') {\r\n                    if (args.length === 0) {\r\n                        delete q.$orderby;\r\n                        q.reset().getItems().then(function (result) {\r\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                        });\r\n                    }\r\n                    else {\r\n                        var orders = args.split(',');\r\n                        if (orders.length === 1) {\r\n                            if (typeof q.$orderby !== 'undefined') {\r\n                                var previousOrders = q.$orderby.split(',');\r\n                                if (previousOrders.length === 1) {\r\n                                    var arr1 = orders[0].split(' '), arr2 = previousOrders[0].split(' ');\r\n                                    if (typeof arr1[1] === 'undefined') {\r\n                                        if (arr1[0] === arr2[0]) {\r\n                                            if ((typeof arr2[1] === 'undefined') || (arr2[1] === 'asc')) {\r\n                                                arr1.push('desc');\r\n                                                orders[0] = arr1.join(' ');\r\n                                            }\r\n                                            else {\r\n                                                arr1.push('asc');\r\n                                                orders[0] = arr1.join(' ');\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        q.reset().orderBy(orders.join(',')).getItems().then(function (result) {\r\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            //register for filter change\r\n            scope.$on('filter.change', function (event, args) {\r\n                if (typeof args === 'object') {\r\n                    if (args.name === attrs.name) {\r\n                        if (typeof args.filter === 'string') {\r\n                            q.reset().filter(args.filter).getItems().then(function (result) {\r\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else if (typeof args === 'string') {\r\n                    q.reset().filter(args).getItems().then(function (result) {\r\n                        scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                    });\r\n                }\r\n            });\r\n            //register for filter change\r\n            scope.$on('page.change', function (event, args) {\r\n                if (typeof args === 'object') {\r\n                    if (args.name === attrs.name) {\r\n                        if (typeof args.page !== 'undefined') {\r\n                            var page = parseInt(args.page), size = scope.top;\r\n                            if (size <= 0) {\r\n                                return;\r\n                            }\r\n                            q.reset().skip((page - 1) * size).getItems().then(function (result) {\r\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            var dataReload = function (event, args) {\r\n                if (typeof args === 'object') {\r\n                    if (args.name === attrs.name) {\r\n                        q.reset().getItems().then(function (result) {\r\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof args === 'string') {\r\n                    if (args === attrs.name) {\r\n                        q.reset().getItems().then(function (result) {\r\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            var dataRefresh = function (event, args) {\r\n                if (typeof args === 'object') {\r\n                    if (args.model === q.$model) {\r\n                        q.reset().getItems().then(function (result) {\r\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            //register for data reload\r\n            scope.$on('data.reload', dataReload);\r\n            //register for data refresh\r\n            scope.$on('item.new', dataRefresh);\r\n            //register for data refresh\r\n            scope.$on('item.save', dataRefresh);\r\n            //register for data refresh\r\n            scope.$on('item.delete', dataRefresh);\r\n        }\r\n    };\r\n}\r\nngModule.directive('loc', MostLocalizedDirective)\r\n    .directive('locHtml', MostLocalizedHtmlDirective)\r\n    .filter('loc', [MostLocalizedFilter])\r\n    .directive('mostEvent', MostEventDirective)\r\n    .directive('mostWatch', MostWatchDirective)\r\n    .directive('mostItem', MostItemDirective)\r\n    .directive('mostData', MostDataInstanceDirective)\r\n    .directive('mostVariable', MostVariableDirective)\r\n    .directive('mostParam', MostParamDirective);\r\nexports.default = ngModule.name;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar angular = __webpack_require__(0);\r\nvar client_1 = __webpack_require__(4);\r\nvar ngModule = angular.module(\'most.services\', []);\r\nvar ContextProvider = /** @class */ (function () {\r\n    function ContextProvider() {\r\n        this.defaults = {\r\n            "base": "/"\r\n        };\r\n    }\r\n    ContextProvider.prototype.$get = function ($http, $q) {\r\n        return new client_1.AngularDataContext(this.defaults.base, $http, $q);\r\n    };\r\n    ;\r\n    return ContextProvider;\r\n}());\r\nngModule.provider("$context", ContextProvider);\r\nexports.default = \'most.services\';\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2FuZ3VsYXJqcy9zZXJ2aWNlcy50cz8yOGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EscUNBQW9DO0FBQ3BDLHNDQUE0QztBQUU1QyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRDtJQUlJO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNaLE1BQU0sRUFBQyxHQUFHO1NBQ2IsQ0FBQztJQUNOLENBQUM7SUFDRCw4QkFBSSxHQUFKLFVBQUssS0FBSyxFQUFFLEVBQUU7UUFDVixNQUFNLENBQUMsSUFBSSwyQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUFBLENBQUM7SUFDTixzQkFBQztBQUFELENBQUM7QUFDRCxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBQyxlQUFlLENBQUMsQ0FBQztBQUU5QyxrQkFBZSxlQUFlLENBQUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBNT1NUIFdlYiBGcmFtZXdvcmsgMi4wIENvZGVuYW1lIEJsdWVzaGlmdFxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcsIFRIRU1PU1QgTFAgQWxsIHJpZ2h0cyByZXNlcnZlZFxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBCU0QtMy1DbGF1c2UgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vdGhlbW9zdC5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQge0lTZXJ2aWNlUHJvdmlkZXJ9IGZyb20gJ2FuZ3VsYXInO1xyXG5pbXBvcnQgYW5ndWxhciA9IHJlcXVpcmUoXCJhbmd1bGFyXCIpO1xyXG5pbXBvcnQge0FuZ3VsYXJEYXRhQ29udGV4dH0gZnJvbSBcIi4vY2xpZW50XCI7XHJcblxyXG5jb25zdCBuZ01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdtb3N0LnNlcnZpY2VzJywgW10pO1xyXG5cclxuY2xhc3MgQ29udGV4dFByb3ZpZGVyIGltcGxlbWVudHMgSVNlcnZpY2VQcm92aWRlciB7XHJcblxyXG4gICAgcHVibGljIGRlZmF1bHRzOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IHtcclxuICAgICAgICAgICAgXCJiYXNlXCI6XCIvXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgJGdldCgkaHR0cCwgJHEpOiBBbmd1bGFyRGF0YUNvbnRleHQge1xyXG4gICAgICAgIHJldHVybiBuZXcgQW5ndWxhckRhdGFDb250ZXh0KHRoaXMuZGVmYXVsdHMuYmFzZSwgJGh0dHAsICRxKTtcclxuICAgIH07XHJcbn1cclxubmdNb2R1bGUucHJvdmlkZXIoXCIkY29udGV4dFwiLENvbnRleHRQcm92aWRlcik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAnbW9zdC5zZXJ2aWNlcyc7XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9tb2R1bGVzL0B0aGVtb3N0L2FuZ3VsYXJqcy9zZXJ2aWNlcy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n/**\r\n * @license\r\n * MOST Web Framework 2.0 Codename Blueshift\r\n * Copyright (c) 2017, THEMOST LP All rights reserved\r\n *\r\n * Use of this source code is governed by an BSD-3-Clause license that can be\r\n * found in the LICENSE file at https://themost.io/license\r\n */\r\nvar common_1 = __webpack_require__(1);\r\nvar client_1 = __webpack_require__(5);\r\nvar REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\r\nfunction dateParser(key, value) {\r\n    if ((typeof value === \'string\') && REG_DATETIME_ISO.test(value)) {\r\n        return new Date(value);\r\n    }\r\n    return value;\r\n}\r\nvar AngularDataContext = /** @class */ (function (_super) {\r\n    __extends(AngularDataContext, _super);\r\n    function AngularDataContext(base, http, q, options) {\r\n        return _super.call(this, new AngularDataService(base || "/", http, q, options)) || this;\r\n    }\r\n    return AngularDataContext;\r\n}(client_1.ClientDataContext));\r\nexports.AngularDataContext = AngularDataContext;\r\nvar AngularDataService = /** @class */ (function (_super) {\r\n    __extends(AngularDataService, _super);\r\n    /**\r\n     *\r\n     * @param {string} base\r\n     * @param {*} http\r\n     * @param {*} q\r\n     * @param {ClientDataContextOptions} options\r\n     */\r\n    function AngularDataService(base, http, q, options) {\r\n        var _this = _super.call(this, base, options) || this;\r\n        _this.http = http;\r\n        _this.q = q;\r\n        return _this;\r\n    }\r\n    AngularDataService.prototype.execute = function (options) {\r\n        var _this = this;\r\n        var $http = this.http;\r\n        var $q = this.q;\r\n        return $q(function (resolve, reject) {\r\n            try {\r\n                //options defaults\r\n                options.method = options.method || "GET";\r\n                options.headers = __assign({}, _this.getHeaders(), options.headers);\r\n                //set content type\r\n                options.headers["Content-Type"] = "application/json";\r\n                //validate options URL\r\n                common_1.Args.notNull(options.url, "Request URL");\r\n                //validate URL format\r\n                common_1.Args.check(!/^https?:\\/\\//i.test(options.url), "Request URL may not be an absolute URI");\r\n                //validate request method\r\n                common_1.Args.check(/^GET|POST|PUT|DELETE$/i.test(options.method), "Invalid request method. Expected GET, POST, PUT or DELETE.");\r\n                var url_ = _this.resolve(options.url);\r\n                var o = {\r\n                    method: options.method,\r\n                    url: url_,\r\n                    headers: options.headers,\r\n                    transformResponse: function (data, headers, status) {\r\n                        if (typeof data === \'undefined\' || data === null) {\r\n                            return;\r\n                        }\r\n                        if (/^application\\/json/.test(headers("Content-Type"))) {\r\n                            if (data.length === 0) {\r\n                                return;\r\n                            }\r\n                            return JSON.parse(data, dateParser);\r\n                        }\r\n                        return data;\r\n                    }\r\n                };\r\n                if (/^GET$/i.test(o.method)) {\r\n                    o["params"] = options.data;\r\n                }\r\n                else {\r\n                    o["data"] = options.data;\r\n                }\r\n                $http(o).then(function (response) {\r\n                    resolve(response.data);\r\n                }, function (err) {\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    };\r\n    return AngularDataService;\r\n}(client_1.ClientDataService));\r\nexports.AngularDataService = AngularDataService;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\r\n/**\r\n * @license\r\n * MOST Web Framework 2.0 Codename Blueshift\r\n * Copyright (c) 2017, THEMOST LP All rights reserved\r\n *\r\n * Use of this source code is governed by an BSD-3-Clause license that can be\r\n * found in the LICENSE file at https://themost.io/license\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nvar common_1 = __webpack_require__(1);\r\nvar parse = __webpack_require__(6);\r\nvar ClientQueryExpression = /** @class */ (function () {\r\n    function ClientQueryExpression() {\r\n    }\r\n    return ClientQueryExpression;\r\n}());\r\nvar ClientDataQueryable = /** @class */ (function () {\r\n    function ClientDataQueryable(model, service) {\r\n        common_1.Args.notEmpty(model, "Model");\r\n        this.model_ = model;\r\n        common_1.Args.notNull(service, "Data Service");\r\n        this.service_ = service;\r\n        if (this.service_.getOptions().useMediaTypeExtensions) {\r\n            this.url_ = common_1.TextUtils.format("%s/index.json", this.model_);\r\n        }\r\n        else {\r\n            this.url_ = common_1.TextUtils.format("%s/", this.model_);\r\n        }\r\n        //init params\r\n        this.params_ = {};\r\n        //init privates\r\n        this.privates_ = new ClientQueryExpression();\r\n    }\r\n    ClientDataQueryable.parse = function (u, service) {\r\n        var uri = parse(u, true);\r\n        var result = new ClientDataQueryable("Model", service || new ParserDataService(uri.protocol ? uri.origin : "/"));\r\n        for (var key in uri.query) {\r\n            if (/^\\$/.test(key)) {\r\n                if (/[+-]?\\d+/.test(uri.query[key])) {\r\n                    result.setParam(key, parseInt(uri.query[key]));\r\n                }\r\n                else {\r\n                    result.setParam(key, uri.query[key]);\r\n                }\r\n            }\r\n        }\r\n        result.setUrl(uri.pathname);\r\n        return result;\r\n    };\r\n    ClientDataQueryable.prototype.toString = function () {\r\n        var uri = this.getService().resolve(this.url_);\r\n        var params = this.getParams();\r\n        var search = "";\r\n        for (var key in params) {\r\n            search = search.concat(key, \'=\', params[key], "&");\r\n        }\r\n        if (search.length) {\r\n            return uri.concat("?", search.replace(/&$/, ""));\r\n        }\r\n        return uri;\r\n    };\r\n    ClientDataQueryable.prototype.toExpand = function () {\r\n        var model = this.getModel();\r\n        var params = this.getParams();\r\n        var search = "";\r\n        for (var key in params) {\r\n            search = search.concat(key, \'=\', params[key], ";");\r\n        }\r\n        if (search.length) {\r\n            return model.concat("(", search.replace(/;$/, ""), ")");\r\n        }\r\n        return model;\r\n    };\r\n    ClientDataQueryable.prototype.takeNext = function (n) {\r\n        var p = this.getParams();\r\n        return this.take(n).skip((p.$skip ? p.$skip : 0) + n);\r\n    };\r\n    ClientDataQueryable.prototype.takePrevious = function (n) {\r\n        var p = this.getParams();\r\n        if (p.$skip > 0) {\r\n            if (n <= p.$skip) {\r\n                this.skip(p.$skip - n);\r\n                return this.take(n);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * @returns {ClientDataServiceBase}\r\n     */\r\n    ClientDataQueryable.prototype.getService = function () {\r\n        return this.service_;\r\n    };\r\n    /**\r\n     * @returns {DataServiceQueryParams}\r\n     */\r\n    ClientDataQueryable.prototype.getParams = function () {\r\n        return this.params_;\r\n    };\r\n    /**\r\n     * @returns {ClientDataQueryable}\r\n     */\r\n    ClientDataQueryable.prototype.setParam = function (name, value) {\r\n        if (/^\\$/.test(name)) {\r\n            this.params_[name] = value;\r\n        }\r\n        else {\r\n            this.params_["$" + name] = value;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets a string which represents the name of the data model associated with this object.\r\n     * @returns {string}\r\n     */\r\n    ClientDataQueryable.prototype.getModel = function () {\r\n        return this.model_;\r\n    };\r\n    /**\r\n     * Gets a string which represents the relative URL associated with this object.\r\n     * @returns {string}\r\n     */\r\n    ClientDataQueryable.prototype.getUrl = function () {\r\n        return this.url_;\r\n    };\r\n    /**\r\n     * Sets the relative URL associated with this object.\r\n     * @param value - A string which represents a relative URI.\r\n     * @returns ClientDataQueryable\r\n     */\r\n    ClientDataQueryable.prototype.setUrl = function (value) {\r\n        common_1.Args.notEmpty(value, "URL");\r\n        common_1.Args.check(!common_1.TextUtils.isAbsoluteURI(value), "URL must be a relative URI");\r\n        this.url_ = value;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.create = function (model, service) {\r\n        return new ClientDataQueryable(model, service);\r\n    };\r\n    ClientDataQueryable.prototype.append_ = function () {\r\n        var _this = this;\r\n        common_1.Args.notNull(this.privates_.left, "Left operand");\r\n        common_1.Args.notNull(this.privates_.op, "Comparison operator");\r\n        var expr;\r\n        if (Array.isArray(this.privates_.right)) {\r\n            common_1.Args.check((this.privates_.op === "eq") || (this.privates_.op === "ne"), "Wrong operator. Expected equal or not equal");\r\n            common_1.Args.check(this.privates_.right.length > 0, "Array may not be empty");\r\n            var arr = this.privates_.right.map(function (x) {\r\n                return _this.privates_.left + " " + _this.privates_.op + " " + _this.escape_(x);\r\n            });\r\n            if (this.privates_.op === "eq") {\r\n                expr = "(" + arr.join(" or ") + ")";\r\n            }\r\n            else {\r\n                expr = "(" + arr.join(" or ") + ")";\r\n            }\r\n        }\r\n        else {\r\n            expr = this.privates_.left + " " + this.privates_.op + " " + this.escape_(this.privates_.right);\r\n        }\r\n        this.privates_.lop = this.privates_.lop || "and";\r\n        if (common_1.TextUtils.isNotEmptyString(this.params_.$filter)) {\r\n            this.params_.$filter = this.params_.$filter + " " + this.privates_.lop + " " + expr;\r\n        }\r\n        else {\r\n            this.params_.$filter = expr;\r\n        }\r\n        //clear object\r\n        this.privates_.left = null;\r\n        this.privates_.op = null;\r\n        this.privates_.right = null;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.escape_ = function (val) {\r\n        var _this = this;\r\n        if ((val == null) || (val == undefined)) {\r\n            return "null";\r\n        }\r\n        if (typeof val === \'boolean\') {\r\n            return (val) ? "true" : "false";\r\n        }\r\n        if (typeof val === \'number\') {\r\n            return val + "";\r\n        }\r\n        if (val instanceof Date) {\r\n            var dt = val;\r\n            var year = dt.getFullYear();\r\n            var month = common_1.TextUtils.zeroPad(dt.getMonth() + 1, 2);\r\n            var day = common_1.TextUtils.zeroPad(dt.getDate(), 2);\r\n            var hour = common_1.TextUtils.zeroPad(dt.getHours(), 2);\r\n            var minute = common_1.TextUtils.zeroPad(dt.getMinutes(), 2);\r\n            var second = common_1.TextUtils.zeroPad(dt.getSeconds(), 2);\r\n            var millisecond = common_1.TextUtils.zeroPad(dt.getMilliseconds(), 3);\r\n            //format timezone\r\n            var offset = (new Date()).getTimezoneOffset(), timezone = (offset >= 0 ? \'+\' : \'\') + common_1.TextUtils.zeroPad(Math.floor(offset / 60), 2) + \':\' + common_1.TextUtils.zeroPad(offset % 60, 2);\r\n            return "\'" + year + \'-\' + month + \'-\' + day + \' \' + hour + \':\' + minute + \':\' + second + \'.\' + millisecond + timezone + "\'";\r\n        }\r\n        if (val instanceof Array) {\r\n            var values_1 = [];\r\n            val.forEach(function (x) {\r\n                values_1.push(_this.escape_(x));\r\n            });\r\n            return values_1.join(\',\');\r\n        }\r\n        if (typeof val === "string") {\r\n            var res = val.replace(/[\\0\\n\\r\\b\\t\\\\\'"\\x1a]/g, function (s) {\r\n                switch (s) {\r\n                    case "\\0": return "\\\\0";\r\n                    case "\\n": return "\\\\n";\r\n                    case "\\r": return "\\\\r";\r\n                    case "\\b": return "\\\\b";\r\n                    case "\\t": return "\\\\t";\r\n                    case "\\x1a": return "\\\\Z";\r\n                    default: return "\\\\" + s;\r\n                }\r\n            });\r\n            return "\'" + res + "\'";\r\n        }\r\n        //otherwise get valueOf\r\n        if (val.hasOwnProperty("$name"))\r\n            return val["$name"];\r\n        else\r\n            return this.escape_(val.valueOf());\r\n    };\r\n    ClientDataQueryable.prototype.where = function (name) {\r\n        common_1.Args.notEmpty(name, "Left operand");\r\n        this.privates_.left = name;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.and = function (name) {\r\n        common_1.Args.notEmpty(name, "Left operand");\r\n        this.privates_.left = name;\r\n        this.privates_.lop = "and";\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.andAlso = function (name) {\r\n        common_1.Args.notEmpty(name, "Left operand");\r\n        this.privates_.left = name;\r\n        this.privates_.lop = "and";\r\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\r\n            this.params_.$filter = "(" + this.params_.$filter + ")";\r\n        }\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.or = function (name) {\r\n        common_1.Args.notEmpty(name, "Left operand");\r\n        this.privates_.left = name;\r\n        this.privates_.lop = "or";\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.orElse = function (name) {\r\n        common_1.Args.notEmpty(name, "Left operand");\r\n        this.privates_.left = name;\r\n        this.privates_.lop = "or";\r\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\r\n            this.params_.$filter = "(" + this.params_.$filter + ")";\r\n        }\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.compare_ = function (op, value) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.op = op;\r\n        this.privates_.right = value;\r\n        return this.append_();\r\n    };\r\n    ClientDataQueryable.prototype.equal = function (value) {\r\n        return this.compare_("eq", value);\r\n    };\r\n    ClientDataQueryable.prototype.notEqual = function (value) {\r\n        return this.compare_("ne", value);\r\n    };\r\n    ClientDataQueryable.prototype.greaterThan = function (value) {\r\n        return this.compare_("gt", value);\r\n    };\r\n    ClientDataQueryable.prototype.greaterOrEqual = function (value) {\r\n        return this.compare_("ge", value);\r\n    };\r\n    ClientDataQueryable.prototype.lowerThan = function (value) {\r\n        return this.compare_("lt", value);\r\n    };\r\n    ClientDataQueryable.prototype.lowerOrEqual = function (value) {\r\n        return this.compare_("le", value);\r\n    };\r\n    /**\r\n     * @param {*} value1\r\n     * @param {*} value2\r\n     * @returns {ClientDataQueryable}\r\n     */\r\n    ClientDataQueryable.prototype.between = function (value1, value2) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        //generate new filter\r\n        var s = ClientDataQueryable.create(this.getModel())\r\n            .where(this.privates_.left).greaterOrEqual(value1)\r\n            .and(this.privates_.left).lowerOrEqual(value2).toFilter();\r\n        this.privates_.lop = this.privates_.lop || "and";\r\n        if (this.params_.$filter) {\r\n            this.params_.$filter = "(" + this.params_.$filter + ") " + this.privates_.lop + " (" + s + ")";\r\n        }\r\n        else {\r\n            this.params_.$filter = "(" + s + ")";\r\n        }\r\n        //clear object\r\n        this.privates_.left = null;\r\n        this.privates_.op = null;\r\n        this.privates_.right = null;\r\n        this.privates_.lop = null;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.toFilter = function () {\r\n        return this.params_.$filter;\r\n    };\r\n    ClientDataQueryable.prototype.contains = function (value) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.op = \'ge\';\r\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(value));\r\n        this.privates_.right = 0;\r\n        return this.append_();\r\n    };\r\n    ClientDataQueryable.prototype.aggregate_ = function (fn) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.left = common_1.TextUtils.format(\'%s(%s)\', fn, this.privates_.left);\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.getDate = function () {\r\n        return this.aggregate_("date");\r\n    };\r\n    ClientDataQueryable.prototype.getDay = function () {\r\n        return this.aggregate_("day");\r\n    };\r\n    ClientDataQueryable.prototype.getMonth = function () {\r\n        return this.aggregate_("month");\r\n    };\r\n    ClientDataQueryable.prototype.getYear = function () {\r\n        return this.aggregate_("year");\r\n    };\r\n    ClientDataQueryable.prototype.getFullYear = function () {\r\n        return this.aggregate_("year");\r\n    };\r\n    ClientDataQueryable.prototype.getHours = function () {\r\n        return this.aggregate_("hour");\r\n    };\r\n    ClientDataQueryable.prototype.getMinutes = function () {\r\n        return this.aggregate_("minute");\r\n    };\r\n    ClientDataQueryable.prototype.getSeconds = function () {\r\n        return this.aggregate_("second");\r\n    };\r\n    ClientDataQueryable.prototype.length = function () {\r\n        return this.aggregate_("length");\r\n    };\r\n    ClientDataQueryable.prototype.trim = function () {\r\n        return this.aggregate_("trim");\r\n    };\r\n    ClientDataQueryable.prototype.toLocaleLowerCase = function () {\r\n        return this.aggregate_("tolower");\r\n    };\r\n    ClientDataQueryable.prototype.toLowerCase = function () {\r\n        return this.aggregate_("tolower");\r\n    };\r\n    ClientDataQueryable.prototype.toLocaleUpperCase = function () {\r\n        return this.aggregate_("toupper");\r\n    };\r\n    ClientDataQueryable.prototype.toUpperCase = function () {\r\n        return this.aggregate_("toupper");\r\n    };\r\n    ClientDataQueryable.prototype.round = function () {\r\n        return this.aggregate_("round");\r\n    };\r\n    ClientDataQueryable.prototype.floor = function () {\r\n        return this.aggregate_("floor");\r\n    };\r\n    ClientDataQueryable.prototype.ceil = function () {\r\n        return this.aggregate_("ceiling");\r\n    };\r\n    ClientDataQueryable.prototype.indexOf = function (s) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(s));\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.substr = function (pos, length) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.left = common_1.TextUtils.format(\'substring(%s,%s,%s)\', this.privates_.left, pos, length);\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.startsWith = function (s) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.left = common_1.TextUtils.format(\'startswith(%s,%s)\', this.privates_.left, this.escape_(s));\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.endsWith = function (s) {\r\n        common_1.Args.notNull(this.privates_.left, "The left operand");\r\n        this.privates_.left = common_1.TextUtils.format(\'endswith(%s,%s)\', this.privates_.left, this.escape_(s));\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.select = function () {\r\n        var attr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            attr[_i] = arguments[_i];\r\n        }\r\n        common_1.Args.notNull(attr, "Attributes");\r\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\r\n        var arr = [];\r\n        for (var i = 0; i < attr.length; i++) {\r\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\r\n            arr.push(attr[i]);\r\n        }\r\n        this.params_.$select = arr.join(",");\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.groupBy = function () {\r\n        var attr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            attr[_i] = arguments[_i];\r\n        }\r\n        common_1.Args.notNull(attr, "Attributes");\r\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\r\n        var arr = [];\r\n        for (var i = 0; i < attr.length; i++) {\r\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\r\n            arr.push(attr[i]);\r\n        }\r\n        this.params_.$groupby = arr.join(",");\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.expand = function () {\r\n        var attr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            attr[_i] = arguments[_i];\r\n        }\r\n        common_1.Args.notNull(attr, "Attributes");\r\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\r\n        var arr = [];\r\n        for (var i = 0; i < attr.length; i++) {\r\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\r\n            arr.push(attr[i]);\r\n        }\r\n        this.params_.$expand = arr.join(",");\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.orderBy = function (attr) {\r\n        common_1.Args.notEmpty(attr, "Order by attribute");\r\n        this.params_.$orderby = attr.toString();\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.thenBy = function (attr) {\r\n        common_1.Args.notEmpty(attr, "Order by attribute");\r\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString());\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.orderByDescending = function (attr) {\r\n        common_1.Args.notEmpty(attr, "Order by attribute");\r\n        this.params_.$orderby = attr.toString() + " desc";\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.thenByDescending = function (attr) {\r\n        common_1.Args.notEmpty(attr, "Order by attribute");\r\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString()) + " desc";\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.skip = function (num) {\r\n        this.params_.$skip = num;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.take = function (num) {\r\n        this.params_.$top = num;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.first = function () {\r\n        delete this.params_.$top;\r\n        delete this.params_.$skip;\r\n        delete this.params_.$count;\r\n        this.params_.$first = true;\r\n        return this.getService().execute({\r\n            method: "GET",\r\n            url: this.getUrl(),\r\n            data: this.params_,\r\n            headers: []\r\n        });\r\n    };\r\n    ClientDataQueryable.prototype.list = function () {\r\n        delete this.params_.$first;\r\n        this.params_.$count = true;\r\n        return this.getService().execute({\r\n            method: "GET",\r\n            url: this.getUrl(),\r\n            data: this.params_,\r\n            headers: {}\r\n        });\r\n    };\r\n    ClientDataQueryable.prototype.item = function () {\r\n        return this.first();\r\n    };\r\n    ClientDataQueryable.prototype.getItem = function () {\r\n        return this.first();\r\n    };\r\n    ClientDataQueryable.prototype.items = function () {\r\n        delete this.params_.$first;\r\n        this.params_.$count = false;\r\n        return this.getService().execute({\r\n            method: "GET",\r\n            url: this.getUrl(),\r\n            data: this.params_,\r\n            headers: {}\r\n        });\r\n    };\r\n    ClientDataQueryable.prototype.getItems = function () {\r\n        return this.items();\r\n    };\r\n    ClientDataQueryable.prototype.getList = function () {\r\n        return this.list();\r\n    };\r\n    ClientDataQueryable.prototype.filter = function (s) {\r\n        common_1.Args.notEmpty("s", "Filter expression");\r\n        this.params_.$filter = s;\r\n        return this;\r\n    };\r\n    ClientDataQueryable.prototype.levels = function (n) {\r\n        common_1.Args.Positive(n, \'Levels\');\r\n        this.params_.$levels = n;\r\n        return this;\r\n    };\r\n    return ClientDataQueryable;\r\n}());\r\nexports.ClientDataQueryable = ClientDataQueryable;\r\nvar ClientDataModel = /** @class */ (function () {\r\n    function ClientDataModel(name, service) {\r\n        this.name_ = name;\r\n        this.service_ = service;\r\n    }\r\n    /**\r\n     * @returns {ClientDataServiceBase}\r\n     */\r\n    ClientDataModel.prototype.getService = function () {\r\n        return this.service_;\r\n    };\r\n    ClientDataModel.prototype.getName = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @param {DataServiceQueryParams} params\r\n     * @returns {ClientDataQueryable}\r\n     */\r\n    ClientDataModel.prototype.asQueryable = function (params) {\r\n        var q = ClientDataQueryable.create(this.getName(), this.service_);\r\n        if (params) {\r\n            for (var key in params) {\r\n                q.setParam(key, params[key]);\r\n            }\r\n        }\r\n        return q;\r\n    };\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    ClientDataModel.prototype.getItems = function () {\r\n        return this.asQueryable().getItems();\r\n    };\r\n    /**\r\n     * @returns {Promise}\r\n     */\r\n    ClientDataModel.prototype.getList = function () {\r\n        return this.asQueryable().getList();\r\n    };\r\n    ClientDataModel.prototype.where = function (attr) {\r\n        return this.asQueryable().where(attr);\r\n    };\r\n    ClientDataModel.prototype.select = function () {\r\n        var attr = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            attr[_i] = arguments[_i];\r\n        }\r\n        var q = this.asQueryable();\r\n        return q.select.apply(q, attr);\r\n    };\r\n    ClientDataModel.prototype.skip = function (num) {\r\n        return this.asQueryable().skip(num);\r\n    };\r\n    ClientDataModel.prototype.take = function (num) {\r\n        return this.asQueryable().take(num);\r\n    };\r\n    ClientDataModel.prototype.getUrl = function () {\r\n        if (this.service_.getOptions().useMediaTypeExtensions) {\r\n            return common_1.TextUtils.format("%s/index.json", this.getName());\r\n        }\r\n        else {\r\n            return common_1.TextUtils.format("%s/", this.getName());\r\n        }\r\n    };\r\n    ClientDataModel.prototype.save = function (obj) {\r\n        return this.getService().execute({\r\n            method: "POST",\r\n            url: this.getUrl(),\r\n            data: obj,\r\n            headers: {}\r\n        });\r\n    };\r\n    ClientDataModel.prototype.schema = function () {\r\n        return this.getService().execute({ method: "GET",\r\n            url: common_1.TextUtils.format("%s/schema.json", this.getName()),\r\n            data: null,\r\n            headers: {}\r\n        });\r\n    };\r\n    ClientDataModel.prototype.remove = function (obj) {\r\n        return this.getService().execute({ method: "DELETE",\r\n            url: this.getUrl(),\r\n            data: obj,\r\n            headers: {}\r\n        });\r\n    };\r\n    ClientDataModel.prototype.levels = function (n) {\r\n        common_1.Args.Positive(n, \'Levels\');\r\n        return this.asQueryable().levels(n);\r\n    };\r\n    return ClientDataModel;\r\n}());\r\nexports.ClientDataModel = ClientDataModel;\r\nvar ClientDataContext = /** @class */ (function () {\r\n    function ClientDataContext(service, options) {\r\n        this.service_ = service;\r\n    }\r\n    ClientDataContext.prototype.setBasicAuthorization = function (username, password) {\r\n        this.getService().setHeader("Authorization", "Basic " + common_1.TextUtils.toBase64(username + ":" + password));\r\n        return this;\r\n    };\r\n    ClientDataContext.prototype.setBearerAuthorization = function (access_token) {\r\n        this.getService().setHeader("Authorization", "Bearer " + access_token);\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets a string which represents the base URL of the MOST Web Application Server.\r\n     * @returns {string}\r\n     */\r\n    ClientDataContext.prototype.getBase = function () {\r\n        return this.base_;\r\n    };\r\n    /**\r\n     * Sets a string which represents the base URL of the MOST Web Application Server.\r\n     */\r\n    ClientDataContext.prototype.setBase = function (value) {\r\n        common_1.Args.notEmpty(value, "Base URL");\r\n        this.base_ = value;\r\n        return this;\r\n    };\r\n    /**\r\n     * Gets the instance of ClientDataService class which is associated with this data context.\r\n     * @returns {ClientDataServiceBase}\r\n     */\r\n    ClientDataContext.prototype.getService = function () {\r\n        return this.service_;\r\n    };\r\n    /**\r\n     * Gets an instance of ClientDataModel class\r\n     * @param name - A string which represents the name of the data model.\r\n     * @returns {ClientDataModel}\r\n     */\r\n    ClientDataContext.prototype.model = function (name) {\r\n        common_1.Args.notEmpty(name, "Model name");\r\n        var model = new ClientDataModel(name, this.getService());\r\n        return model;\r\n    };\r\n    return ClientDataContext;\r\n}());\r\nexports.ClientDataContext = ClientDataContext;\r\nvar ClientDataService = /** @class */ (function () {\r\n    function ClientDataService(base, options) {\r\n        this.headers_ = {};\r\n        this.options_ = options || {\r\n            useMediaTypeExtensions: true\r\n        };\r\n        if (typeof base === \'undefined\' || base == null) {\r\n            this.base_ = "/";\r\n        }\r\n        else {\r\n            this.base_ = base;\r\n            if (!/\\/$/.test(this.base_)) {\r\n                this.base_ += "/";\r\n            }\r\n        }\r\n    }\r\n    ClientDataService.prototype.getOptions = function () {\r\n        return this.options_;\r\n    };\r\n    ClientDataService.prototype.setHeader = function (name, value) {\r\n        this.headers_[name] = value;\r\n    };\r\n    ClientDataService.prototype.getHeaders = function () {\r\n        return this.headers_;\r\n    };\r\n    ClientDataService.prototype.getBase = function () {\r\n        return this.base_;\r\n    };\r\n    ClientDataService.prototype.resolve = function (relative) {\r\n        if (typeof relative === \'string\' && relative.length > 0) {\r\n            if (/^\\//.test(relative))\r\n                return this.getBase() + relative.substr(1);\r\n            else\r\n                return this.getBase() + relative;\r\n        }\r\n        throw new Error("Invalid argument. Expected a not empty string.");\r\n    };\r\n    ClientDataService.prototype.execute = function (options) {\r\n        throw new Error("Method not implemented.");\r\n    };\r\n    return ClientDataService;\r\n}());\r\nexports.ClientDataService = ClientDataService;\r\nvar ParserDataService = /** @class */ (function (_super) {\r\n    __extends(ParserDataService, _super);\r\n    function ParserDataService(base) {\r\n        return _super.call(this, base) || this;\r\n    }\r\n    ParserDataService.prototype.execute = function (options) {\r\n        throw new Error("Method not allowed.");\r\n    };\r\n    return ParserDataService;\r\n}(ClientDataService));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar required = __webpack_require__(8)\n  , qs = __webpack_require__(9)\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nfunction lolcation(loc) {\n  loc = loc || global.location || {};\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nURL.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\n\nmodule.exports = URL;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2NsaWVudC9ub2RlX21vZHVsZXMvcmVxdWlyZXMtcG9ydC9pbmRleC5qcz83YWUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UncmUgcmVxdWlyZWQgdG8gYWRkIGEgcG9ydCBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RlZmF1bHQtcG9ydFxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBwb3J0IFBvcnQgbnVtYmVyIHdlIG5lZWQgdG8gY2hlY2tcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCB3ZSBuZWVkIHRvIGNoZWNrIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSXMgaXQgYSBkZWZhdWx0IHBvcnQgZm9yIHRoZSBnaXZlbiBwcm90b2NvbFxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZWQocG9ydCwgcHJvdG9jb2wpIHtcbiAgcHJvdG9jb2wgPSBwcm90b2NvbC5zcGxpdCgnOicpWzBdO1xuICBwb3J0ID0gK3BvcnQ7XG5cbiAgaWYgKCFwb3J0KSByZXR1cm4gZmFsc2U7XG5cbiAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHAnOlxuICAgIGNhc2UgJ3dzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gODA7XG5cbiAgICBjYXNlICdodHRwcyc6XG4gICAgY2FzZSAnd3NzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNDQzO1xuXG4gICAgY2FzZSAnZnRwJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gMjE7XG5cbiAgICBjYXNlICdnb3BoZXInOlxuICAgIHJldHVybiBwb3J0ICE9PSA3MDtcblxuICAgIGNhc2UgJ2ZpbGUnOlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwb3J0ICE9PSAwO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9AdGhlbW9zdC9jbGllbnQvbm9kZV9tb2R1bGVzL3JlcXVpcmVzLXBvcnQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  //\n  // Little nifty parsing hack, leverage the fact that RegExp.exec increments\n  // the lastIndex property so we can continue executing this loop until we've\n  // parsed all results.\n  //\n  for (;\n    part = parser.exec(query);\n    result[decode(part[1])] = decode(part[2])\n  );\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2NsaWVudC9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmdpZnkvaW5kZXguanM/MTQ2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogRGVjb2RlIGEgVVJJIGVuY29kZWQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgVVJJIGVuY29kZWQgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIGRlY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgcXVlcnkgc3RyaW5nIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHF1ZXJ5IHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIHBhcnNlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZyhxdWVyeSkge1xuICB2YXIgcGFyc2VyID0gLyhbXj0/Jl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICAvL1xuICAvLyBMaXR0bGUgbmlmdHkgcGFyc2luZyBoYWNrLCBsZXZlcmFnZSB0aGUgZmFjdCB0aGF0IFJlZ0V4cC5leGVjIGluY3JlbWVudHNcbiAgLy8gdGhlIGxhc3RJbmRleCBwcm9wZXJ0eSBzbyB3ZSBjYW4gY29udGludWUgZXhlY3V0aW5nIHRoaXMgbG9vcCB1bnRpbCB3ZSd2ZVxuICAvLyBwYXJzZWQgYWxsIHJlc3VsdHMuXG4gIC8vXG4gIGZvciAoO1xuICAgIHBhcnQgPSBwYXJzZXIuZXhlYyhxdWVyeSk7XG4gICAgcmVzdWx0W2RlY29kZShwYXJ0WzFdKV0gPSBkZWNvZGUocGFydFsyXSlcbiAgKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHF1ZXJ5IHN0cmluZyB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3QgdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZ2lmeShvYmosIHByZWZpeCkge1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgdmFyIHBhaXJzID0gW107XG5cbiAgLy9cbiAgLy8gT3B0aW9uYWxseSBwcmVmaXggd2l0aCBhICc/JyBpZiBuZWVkZWRcbiAgLy9cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJlZml4KSBwcmVmaXggPSAnPyc7XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHBhaXJzLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyc9JysgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrZXldKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA/IHByZWZpeCArIHBhaXJzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBxdWVyeXN0cmluZ2lmeTtcbmV4cG9ydHMucGFyc2UgPSBxdWVyeXN0cmluZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbW9kdWxlcy9AdGhlbW9zdC9jbGllbnQvbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")}]);