!function(Q){function U(B){if(F[B])return F[B].exports;var I=F[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,U),I.l=!0,I.exports}var F={};U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},U.p="",U(U.s=2)}([function(module,exports){eval("module.exports = angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYW5ndWxhclwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CodedError = /** @class */ (function (_super) {\n    __extends(CodedError, _super);\n    function CodedError(message, code) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        return _this;\n    }\n    return CodedError;\n}(Error));\nexports.CodedError = CodedError;\nvar Base64 = /** @class */ (function () {\n    function Base64() {\n        this.PADCHAR = \'=\';\n        this.ALPHA = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n    }\n    Base64.prototype.getByte = function (s, i) {\n        var x = s.charCodeAt(i);\n        return x;\n    };\n    Base64.prototype.getByte64 = function (s, i) {\n        var idx = this.ALPHA.indexOf(s.charAt(i));\n        return idx;\n    };\n    Base64.prototype.decode = function (s) {\n        var pads = 0, i, b10, imax = s.length, x = [];\n        s = String(s);\n        if (imax === 0) {\n            return s;\n        }\n        if (s.charAt(imax - 1) === this.PADCHAR) {\n            pads = 1;\n            if (s.charAt(imax - 2) === this.PADCHAR) {\n                pads = 2;\n            }\n            imax -= 4;\n        }\n        for (i = 0; i < imax; i += 4) {\n            b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6) | this.getByte64(s, i + 3);\n            x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255, b10 & 255));\n        }\n        switch (pads) {\n            case 1:\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6);\n                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255));\n                break;\n            case 2:\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12);\n                x.push(String.fromCharCode(b10 >> 16));\n                break;\n        }\n        return x.join(\'\');\n    };\n    Base64.prototype.encode = function (s) {\n        s = String(s);\n        var i, b10, x = [], imax = s.length - s.length % 3;\n        if (s.length === 0) {\n            return s;\n        }\n        for (i = 0; i < imax; i += 3) {\n            b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8) | this.getByte(s, i + 2);\n            x.push(this.ALPHA.charAt(b10 >> 18));\n            x.push(this.ALPHA.charAt((b10 >> 12) & 63));\n            x.push(this.ALPHA.charAt((b10 >> 6) & 63));\n            x.push(this.ALPHA.charAt(b10 & 63));\n        }\n        switch (s.length - imax) {\n            case 1:\n                b10 = this.getByte(s, i) << 16;\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.PADCHAR + this.PADCHAR);\n                break;\n            case 2:\n                b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8);\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.ALPHA.charAt((b10 >> 6) & 63) + this.PADCHAR);\n                break;\n        }\n        return x.join(\'\');\n    };\n    return Base64;\n}());\nexports.Base64 = Base64;\nvar TextUtils = /** @class */ (function () {\n    function TextUtils() {\n    }\n    TextUtils.isNotEmptyString = function (s) {\n        return (s != null) && (s != undefined) && (s.length > 0);\n    };\n    TextUtils.isNullOrUndefined = function (s) {\n        return (s != null) && (s != undefined);\n    };\n    TextUtils.zeroPad = function (num, length) {\n        num = num || 0;\n        var res = num.toString();\n        while (res.length < length) {\n            res = \'0\' + res;\n        }\n        return res;\n    };\n    TextUtils.isDate = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_DATETIME_ISO.test(s);\n        }\n        return false;\n    };\n    TextUtils.parseDate = function (s) {\n        if (TextUtils.isDate(s)) {\n            return new Date(s);\n        }\n        return;\n    };\n    /**\n     * Encodes the given string to Base-64 format\n     * @param {string} s - A string to encode\n     * @returns {string}\n     */\n    TextUtils.toBase64 = function (s) {\n        var cv = new Base64();\n        return cv.encode(s);\n    };\n    /**\n     * Decodes the given string from Base-64 format\n     * @param {string} s - A base-64 encoded string\n     * @returns {string}\n     */\n    TextUtils.fromBase64 = function (s) {\n        var cv = new Base64();\n        return cv.decode(s);\n    };\n    TextUtils.format = function (s) {\n        var p = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            p[_i - 1] = arguments[_i];\n        }\n        var i = 0;\n        return s.replace(/%[sdfj%]/g, function (x) {\n            if (x === "%%")\n                return "%";\n            if (i >= p.length)\n                return x;\n            var p1 = p[i++];\n            if (((p1 == null) && (p1 == undefined))) {\n                return "";\n            }\n            switch (x) {\n                case "%s":\n                    return p1.toString();\n                case "%d":\n                    return parseInt(p1);\n                case "%f":\n                    return parseFloat(p1);\n                case "%j":\n                    return JSON.stringify(p1);\n                default:\n                    return x;\n            }\n        });\n    };\n    TextUtils.REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\n    return TextUtils;\n}());\nexports.TextUtils = TextUtils;\nvar Args = /** @class */ (function () {\n    function Args() {\n    }\n    Args.check = function (expr, message, code) {\n        if (!expr) {\n            throw new CodedError(message, code || "EARG");\n        }\n    };\n    Args.notNull = function (obj, name) {\n        Args.check((obj != null) && (obj !== undefined), name + " may not be null or undefined", "ENULL");\n    };\n    Args.notEmpty = function (obj, name) {\n        Args.check((obj != null) && (obj !== undefined) && (obj.length > 0), name + " may not be empty", "ENULL");\n    };\n    Args.notNegative = function (obj, name) {\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\n        Args.check((obj >= 0), name + " may not be negative", "ENUMBER");\n    };\n    Args.Positive = function (obj, name) {\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\n        Args.check((obj > 0), name + " must be a positive number", "ENUMBER");\n    };\n    return Args;\n}());\nexports.Args = Args;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar angular = __webpack_require__(0);\nvar services_1 = __webpack_require__(3);\nvar ngModule = angular.module('most', [services_1.default]);\nfunction localized(text, localeSet) {\n    window[\"locales\"] = window[\"locales\"] || {};\n    localeSet = localeSet || 'global';\n    if (typeof text !== 'string')\n        return text;\n    if (text.length === 0)\n        return text;\n    var locale = window[\"locales\"][localeSet];\n    if (locale) {\n        var out = locale[text];\n        if (out)\n            return out;\n    }\n    return text;\n}\nfunction MostLocalizedDirective() {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n            if (attrs.title)\n                element.attr('title', localized(attrs.title, attrs['mostLoc']));\n            if (attrs.placeholder)\n                element.attr('placeholder', localized(attrs.placeholder, attrs['mostLoc']));\n        }\n    };\n}\nfunction MostLocalizedHtmlDirective() {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs) {\n            var text = localized(element.html(), attrs['mostLocHtml']);\n            if (text)\n                element.html(text);\n        }\n    };\n}\nfunction MostLocalizedFilter() {\n    return function (input, localeSet) {\n        return localized(input, localeSet);\n    };\n}\nfunction MostEventDirective($timeout) {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            //get event name\n            var name = element.attr('name') || attrs['event'], action = attrs['eventAction'];\n            if (name) {\n                scope.$on(name, function (event, args) {\n                    if (action) {\n                        $timeout(function () {\n                            scope.$args = args;\n                            try {\n                                scope.$apply(action);\n                            }\n                            catch (e) {\n                                console.log(e);\n                            }\n                            scope.$args = null;\n                        });\n                    }\n                });\n            }\n        }\n    };\n}\n/**\n * @return {IDirective}\n * @constructor\n */\nfunction MostWatchDirective() {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            //get event name\n            var name = element.attr('name') || attrs['event'], args = attrs['eventArgs'];\n            if (name) {\n                if (typeof scope.broadcast === 'function') {\n                    scope.$watch(args, function (value) {\n                        scope.broadcast(name, value);\n                    });\n                }\n                else {\n                    scope.$watch(args, function (value) {\n                        scope.emit(name, value);\n                    });\n                }\n            }\n        }\n    };\n}\nfunction MostItemDirective($window) {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs) {\n            scope.route = $window.route;\n            var item = scope.$eval(attrs['mostItem']);\n            item.then(function (result) {\n                scope.item = result;\n            }, function (reason) {\n                console.log(reason);\n                scope.item = null;\n            });\n        }\n    };\n}\nfunction MostVariableDirective($timeout) {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            if (attrs.ngValue) {\n                return scope.$eval(attrs.name + \"=\" + attrs.ngValue + \";\");\n            }\n            function set_(value) {\n                if (scope.$$phase === '$digest' || scope.$$phase === '$apply') {\n                    $timeout(function () {\n                        scope[attrs.name] = value;\n                    });\n                }\n                else {\n                    scope[attrs.name] = value;\n                }\n            }\n            scope.$watch(attrs.value, function (newValue) {\n                set_(newValue);\n            });\n        }\n    };\n}\nfunction MostParamDirective($window) {\n    return {\n        restrict: 'AE',\n        link: function (scope, element, attrs) {\n            scope.route = $window.route;\n            if (attrs['mostParam']) {\n                var values = attrs['mostParam'].split(';');\n                var params = {};\n                for (var i = 0; i < values.length; i++) {\n                    var value = values[i].split('=');\n                    if (value.length === 2)\n                        params[value[0]] = value[1];\n                }\n                $window.route = $window.route || {};\n                var _loop_1 = function (name_1) {\n                    if (params.hasOwnProperty(name_1)) {\n                        scope.$watch(params[name_1], function (newValue) {\n                            $window.route[name_1] = newValue;\n                        });\n                    }\n                };\n                for (var name_1 in params) {\n                    _loop_1(name_1);\n                }\n            }\n            else {\n                scope.$watch(attrs.value, function (newValue) {\n                    $window.route = $window.route || {};\n                    $window.route[attrs.name] = newValue;\n                });\n            }\n        }\n    };\n}\nfunction MostDataInstanceDirective($context, $parse, $window) {\n    return {\n        restrict: 'E',\n        scope: { model: '@', filter: '@', select: '@', group: '@', order: '@', top: '@', inlinecount: '@', paged: '@', skip: '@', expand: '@', prepared: '@', url: '@' },\n        link: function (scope, element, attrs) {\n            if (typeof scope.model === 'undefined')\n                return;\n            scope.route = $window.route;\n            var q = $context.model(scope.model).asQueryable();\n            var arr = [];\n            if (typeof scope.url === 'string' && scope.url.length > 0) {\n                q.setUrl(scope.url);\n            }\n            //apply select (if any)\n            if (scope.select) {\n                arr = scope.select.split(',');\n                //apply as array expression if we have only one field\n                if (arr.length == 1)\n                    q.asArray(true);\n                q.select(arr);\n            }\n            if (scope.group) {\n                if (angular.isArray(scope.group))\n                    q.group(scope.group);\n                else if (typeof scope.group === 'string' && scope.group.length > 0)\n                    q.group(scope.group.split(','));\n            }\n            if (scope.order) {\n                arr = [];\n                if (angular.isArray(scope.order))\n                    arr = scope.order;\n                else if (typeof scope.order === 'string' && scope.order.length > 0)\n                    arr = scope.order.split(',');\n                for (var i = 0; i < arr.length; i++) {\n                    var str = arr[i];\n                    var matches = /(.*?) desc$/i.exec(str);\n                    if (matches) {\n                        q.orderByDescending(matches[1]);\n                    }\n                    else {\n                        matches = /(.*?) asc$/i.exec(str);\n                        if (matches) {\n                            q.orderBy(matches[1]);\n                        }\n                        else {\n                            q.orderBy(str);\n                        }\n                    }\n                }\n            }\n            if (parseInt(scope.skip) > 0) {\n                q.skip(parseInt(scope.skip));\n            }\n            if (parseInt(scope.top) > 0) {\n                q.take(parseInt(scope.top));\n            }\n            if (/^true$/i.test(scope.inlinecount)) {\n                q.paged(true);\n            }\n            if (/^true$/i.test(scope.paged)) {\n                q.paged(true);\n            }\n            if (typeof scope.filter === 'string' && scope.filter.length > 0) {\n                q.filter(scope.filter);\n                if (scope.prepared == 'true')\n                    q.prepare();\n            }\n            if (typeof scope.expand === 'string' && scope.expand.length > 0) {\n                q.expand(scope.expand.split(','));\n            }\n            //set queryable\n            q.getItems().then(function (result) {\n                var getter = $parse(attrs.name);\n                var setter;\n                if (getter)\n                    setter = getter.assign;\n                if (typeof setter === 'function') {\n                    setter(scope.$parent, (q.$top === 1) ? result[0] : result);\n                }\n                //scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n            });\n            //register for order change\n            scope.$on('order.change', function (event, args) {\n                if (typeof args === 'string') {\n                    if (args.length === 0) {\n                        delete q.$orderby;\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                    else {\n                        var orders = args.split(',');\n                        if (orders.length === 1) {\n                            if (typeof q.$orderby !== 'undefined') {\n                                var previousOrders = q.$orderby.split(',');\n                                if (previousOrders.length === 1) {\n                                    var arr1 = orders[0].split(' '), arr2 = previousOrders[0].split(' ');\n                                    if (typeof arr1[1] === 'undefined') {\n                                        if (arr1[0] === arr2[0]) {\n                                            if ((typeof arr2[1] === 'undefined') || (arr2[1] === 'asc')) {\n                                                arr1.push('desc');\n                                                orders[0] = arr1.join(' ');\n                                            }\n                                            else {\n                                                arr1.push('asc');\n                                                orders[0] = arr1.join(' ');\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        q.reset().orderBy(orders.join(',')).getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            });\n            //register for filter change\n            scope.$on('filter.change', function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        if (typeof args.filter === 'string') {\n                            q.reset().filter(args.filter).getItems().then(function (result) {\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                            });\n                        }\n                    }\n                }\n                else if (typeof args === 'string') {\n                    q.reset().filter(args).getItems().then(function (result) {\n                        scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                    });\n                }\n            });\n            //register for filter change\n            scope.$on('page.change', function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        if (typeof args.page !== 'undefined') {\n                            var page = parseInt(args.page), size = parseInt(scope.top);\n                            if (size <= 0) {\n                                return;\n                            }\n                            q.reset().skip((page - 1) * size).getItems().then(function (result) {\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                            });\n                        }\n                    }\n                }\n            });\n            var dataReload = function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n                else if (typeof args === 'string') {\n                    if (args === attrs.name) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            };\n            var dataRefresh = function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.model === q.$model) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            };\n            //register for data reload\n            scope.$on('data.reload', dataReload);\n            //register for data refresh\n            scope.$on('item.new', dataRefresh);\n            //register for data refresh\n            scope.$on('item.save', dataRefresh);\n            //register for data refresh\n            scope.$on('item.delete', dataRefresh);\n        }\n    };\n}\nngModule.directive('loc', MostLocalizedDirective)\n    .directive('locHtml', MostLocalizedHtmlDirective)\n    .filter('loc', [MostLocalizedFilter])\n    .directive('mostEvent', MostEventDirective)\n    .directive('mostWatch', MostWatchDirective)\n    .directive('mostItem', MostItemDirective)\n    .directive('mostData', MostDataInstanceDirective)\n    .directive('mostVariable', MostVariableDirective)\n    .directive('mostParam', MostParamDirective);\nexports.default = ngModule.name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar angular = __webpack_require__(0);\nvar client_1 = __webpack_require__(4);\nvar ngModule = angular.module(\'most.services\', []);\nvar ContextProvider = /** @class */ (function () {\n    function ContextProvider() {\n        this.defaults = { base: "/" };\n    }\n    ContextProvider.prototype.$get = function ($http, $q) {\n        return new client_1.AngularDataContext(this.defaults.base, $http, $q);\n    };\n    ;\n    return ContextProvider;\n}());\nngModule.provider("$context", ContextProvider);\nexports.default = \'most.services\';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2FuZ3VsYXJqcy9zZXJ2aWNlcy50cz8yOGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EscUNBQW9DO0FBQ3BDLHNDQUE0QztBQUU1QyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRDtJQUlJO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLElBQUksRUFBQyxHQUFHLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBQ0QsOEJBQUksR0FBSixVQUFLLEtBQUssRUFBRSxFQUFFO1FBQ1YsTUFBTSxDQUFDLElBQUksMkJBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFBQSxDQUFDO0lBQ04sc0JBQUM7QUFBRCxDQUFDO0FBQ0QsUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUMsZUFBZSxDQUFDLENBQUM7QUFFOUMsa0JBQWUsZUFBZSxDQUFDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBNT1NUIFdlYiBGcmFtZXdvcmsgMi4wIENvZGVuYW1lIEJsdWVzaGlmdFxuICogQ29weXJpZ2h0IChjKSAyMDE3LCBUSEVNT1NUIExQIEFsbCByaWdodHMgcmVzZXJ2ZWRcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBCU0QtMy1DbGF1c2UgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3RoZW1vc3QuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge0lTZXJ2aWNlUHJvdmlkZXJ9IGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IGFuZ3VsYXIgPSByZXF1aXJlKFwiYW5ndWxhclwiKTtcbmltcG9ydCB7QW5ndWxhckRhdGFDb250ZXh0fSBmcm9tIFwiLi9jbGllbnRcIjtcblxuY29uc3QgbmdNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbW9zdC5zZXJ2aWNlcycsIFtdKTtcblxuY2xhc3MgQ29udGV4dFByb3ZpZGVyIGltcGxlbWVudHMgSVNlcnZpY2VQcm92aWRlciB7XG5cbiAgICBwdWJsaWMgZGVmYXVsdHM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRlZmF1bHRzID0geyBiYXNlOlwiL1wiIH07XG4gICAgfVxuICAgICRnZXQoJGh0dHAsICRxKTogYW55IHtcbiAgICAgICAgcmV0dXJuIG5ldyBBbmd1bGFyRGF0YUNvbnRleHQodGhpcy5kZWZhdWx0cy5iYXNlLCAkaHR0cCwgJHEpO1xuICAgIH07XG59XG5uZ01vZHVsZS5wcm92aWRlcihcIiRjb250ZXh0XCIsQ29udGV4dFByb3ZpZGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgJ21vc3Quc2VydmljZXMnO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9tb2R1bGVzL0B0aGVtb3N0L2FuZ3VsYXJqcy9zZXJ2aWNlcy50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nvar common_1 = __webpack_require__(1);\nvar client_1 = __webpack_require__(5);\nvar REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\nfunction dateParser(key, value) {\n    if ((typeof value === \'string\') && REG_DATETIME_ISO.test(value)) {\n        return new Date(value);\n    }\n    return value;\n}\nvar AngularDataContext = /** @class */ (function (_super) {\n    __extends(AngularDataContext, _super);\n    function AngularDataContext(base, http, q) {\n        return _super.call(this, new AngularDataService(base || "/", http, q)) || this;\n    }\n    return AngularDataContext;\n}(client_1.ClientDataContext));\nexports.AngularDataContext = AngularDataContext;\nvar AngularDataService = /** @class */ (function (_super) {\n    __extends(AngularDataService, _super);\n    /**\n     *\n     * @param {string} base\n     * @param {*} http\n     * @param {*} q\n     */\n    function AngularDataService(base, http, q) {\n        var _this = _super.call(this, base) || this;\n        _this.http = http;\n        _this.q = q;\n        return _this;\n    }\n    AngularDataService.prototype.execute = function (options) {\n        var _this = this;\n        var $http = this.http;\n        var $q = this.q;\n        return $q(function (resolve, reject) {\n            try {\n                //options defaults\n                options.method = options.method || "GET";\n                options.headers = __assign({}, _this.getHeaders(), options.headers);\n                //set content type\n                options.headers["Content-Type"] = "application/json";\n                //validate options URL\n                common_1.Args.notNull(options.url, "Request URL");\n                //validate URL format\n                common_1.Args.check(!/^https?:\\/\\//i.test(options.url), "Request URL may not be an absolute URI");\n                //validate request method\n                common_1.Args.check(/^GET|POST|PUT|DELETE$/i.test(options.method), "Invalid request method. Expected GET, POST, PUT or DELETE.");\n                var url_ = _this.resolve(options.url);\n                var o = {\n                    method: options.method,\n                    url: url_,\n                    headers: options.headers,\n                    transformResponse: function (data, headers, status) {\n                        if (typeof data === \'undefined\' || data === null) {\n                            return;\n                        }\n                        if (/^application\\/json/.test(headers("Content-Type"))) {\n                            if (data.length === 0) {\n                                return;\n                            }\n                            return JSON.parse(data, dateParser);\n                        }\n                        return data;\n                    }\n                };\n                if (/^GET$/i.test(o.method)) {\n                    o["params"] = options.data;\n                }\n                else {\n                    o["data"] = options.data;\n                }\n                $http(o).then(function (response) {\n                    resolve(response.data);\n                }, function (err) {\n                    reject(err);\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    };\n    return AngularDataService;\n}(client_1.ClientDataService));\nexports.AngularDataService = AngularDataService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(1);\nvar ClientQueryExpression = /** @class */ (function () {\n    function ClientQueryExpression() {\n    }\n    return ClientQueryExpression;\n}());\nvar ClientDataQueryable = /** @class */ (function () {\n    function ClientDataQueryable(model, service) {\n        common_1.Args.notEmpty(model, "Model");\n        this.model_ = model;\n        common_1.Args.notNull(service, "Data Service");\n        this.service_ = service;\n        this.url_ = common_1.TextUtils.format("/%s/index.json", this.model_);\n        //init params\n        this.params_ = {};\n        //init privates\n        this.privates_ = new ClientQueryExpression();\n    }\n    /**\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataQueryable.prototype.getService = function () {\n        return this.service_;\n    };\n    /**\n     * @returns {DataServiceQueryParams}\n     */\n    ClientDataQueryable.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @returns {ClientDataQueryable}\n     */\n    ClientDataQueryable.prototype.setParam = function (name, value) {\n        if (/^\\$/.test(name)) {\n            this.params_[name] = value;\n        }\n        else {\n            this.params_["$" + name] = value;\n        }\n        return this;\n    };\n    /**\n     * Gets a string which represents the name of the data model associated with this object.\n     * @returns {string}\n     */\n    ClientDataQueryable.prototype.getModel = function () {\n        return this.model_;\n    };\n    /**\n     * Gets a string which represents the relative URL associated with this object.\n     * @returns {string}\n     */\n    ClientDataQueryable.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * Sets the relative URL associated with this object.\n     * @param value - A string which represents a relative URI.\n     */\n    ClientDataQueryable.prototype.setUrl = function (value) {\n        common_1.Args.notEmpty(value, "URL");\n        common_1.Args.check(/^\\//.test(value), "URL must be a relative URI");\n        this.url_ = value;\n    };\n    ClientDataQueryable.create = function (model, service) {\n        return new ClientDataQueryable(model, service);\n    };\n    ClientDataQueryable.prototype.append_ = function () {\n        common_1.Args.notNull(this.privates_.left, "Left operand");\n        common_1.Args.notNull(this.privates_.op, "Comparison operator");\n        var expr;\n        if (Array.isArray(this.privates_.right)) {\n            common_1.Args.check((this.privates_.op === "eq") || (this.privates_.op === "ne"), "Wrong operator. Expected equal or not equal");\n            common_1.Args.check(this.privates_.right.length > 0, "Array may not be empty");\n            var arr = this.privates_.right.map(function (x) {\n                return this.privates_.left + " " + this.privates_.op + " " + this.escape_(x);\n            });\n            if (this.privates_.op === "eq") {\n                expr = "(" + arr.join(" or ") + ")";\n            }\n            else {\n                expr = "(" + arr.join(" or ") + ")";\n            }\n        }\n        else {\n            expr = this.privates_.left + " " + this.privates_.op + " " + this.escape_(this.privates_.right);\n        }\n        this.privates_.lop = this.privates_.lop || "and";\n        if (common_1.TextUtils.isNotEmptyString(this.params_.$filter)) {\n            this.params_.$filter = this.params_.$filter + " " + this.privates_.lop + " " + expr;\n        }\n        else {\n            this.params_.$filter = expr;\n        }\n        //clear object\n        this.privates_.left = null;\n        this.privates_.op = null;\n        this.privates_.right = null;\n        return this;\n    };\n    ClientDataQueryable.prototype.escape_ = function (val) {\n        if ((val == null) || (val == undefined)) {\n            return "null";\n        }\n        if (typeof val === \'boolean\') {\n            return (val) ? "true" : "false";\n        }\n        if (typeof val === \'number\') {\n            return val + "";\n        }\n        if (val instanceof Date) {\n            var dt = new Date(val);\n            var year = dt.getFullYear();\n            var month = common_1.TextUtils.zeroPad(dt.getMonth() + 1, 2);\n            var day = common_1.TextUtils.zeroPad(dt.getDate(), 2);\n            var hour = common_1.TextUtils.zeroPad(dt.getHours(), 2);\n            var minute = common_1.TextUtils.zeroPad(dt.getMinutes(), 2);\n            var second = common_1.TextUtils.zeroPad(dt.getSeconds(), 2);\n            var millisecond = common_1.TextUtils.zeroPad(dt.getMilliseconds(), 3);\n            //format timezone\n            var offset = (new Date()).getTimezoneOffset(), timezone = (offset >= 0 ? \'+\' : \'\') + common_1.TextUtils.zeroPad(Math.floor(offset / 60), 2) + \':\' + common_1.TextUtils.zeroPad(offset % 60, 2);\n            return "\'" + year + \'-\' + month + \'-\' + day + \' \' + hour + \':\' + minute + \':\' + second + \'.\' + millisecond + timezone + "\'";\n        }\n        if (val instanceof Array) {\n            var values_1 = [];\n            val.forEach(function (x) {\n                values_1.push(this.escape_(x));\n            });\n            return values_1.join(\',\');\n        }\n        if (typeof val === "string") {\n            var res = val.replace(/[\\0\\n\\r\\b\\t\\\\\'"\\x1a]/g, function (s) {\n                switch (s) {\n                    case "\\0": return "\\\\0";\n                    case "\\n": return "\\\\n";\n                    case "\\r": return "\\\\r";\n                    case "\\b": return "\\\\b";\n                    case "\\t": return "\\\\t";\n                    case "\\x1a": return "\\\\Z";\n                    default: return "\\\\" + s;\n                }\n            });\n            return "\'" + res + "\'";\n        }\n        //otherwise get valueOf\n        if (val.hasOwnProperty("$name"))\n            return val["$name"];\n        else\n            return this.escape_(val.valueOf());\n    };\n    ClientDataQueryable.prototype.where = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        return this;\n    };\n    ClientDataQueryable.prototype.and = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "and";\n        return this;\n    };\n    ClientDataQueryable.prototype.andAlso = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "and";\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\n            this.params_.$filter = "(" + this.params_.$filter + ")";\n        }\n        return this;\n    };\n    ClientDataQueryable.prototype.or = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "or";\n        return this;\n    };\n    ClientDataQueryable.prototype.orElse = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "or";\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\n            this.params_.$filter = "(" + this.params_.$filter + ")";\n        }\n        return this;\n    };\n    ClientDataQueryable.prototype.compare_ = function (op, value) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.op = op;\n        this.privates_.right = value;\n        return this.append_();\n    };\n    ClientDataQueryable.prototype.equal = function (value) {\n        return this.compare_("eq", value);\n    };\n    ClientDataQueryable.prototype.notEqual = function (value) {\n        return this.compare_("ne", value);\n    };\n    ClientDataQueryable.prototype.greaterThan = function (value) {\n        return this.compare_("gt", value);\n    };\n    ClientDataQueryable.prototype.greaterOrEqual = function (value) {\n        return this.compare_("ge", value);\n    };\n    ClientDataQueryable.prototype.lowerThan = function (value) {\n        return this.compare_("lt", value);\n    };\n    ClientDataQueryable.prototype.lowerOrEqual = function (value) {\n        return this.compare_("le", value);\n    };\n    /**\n     * @param {*} value1\n     * @param {*} value2\n     * @returns {ClientDataQueryable}\n     */\n    ClientDataQueryable.prototype.between = function (value1, value2) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        //generate new filter\n        var s = ClientDataQueryable.create(this.getModel())\n            .where(this.privates_.left).greaterOrEqual(value1)\n            .and(this.privates_.left).lowerOrEqual(value2).toFilter();\n        this.privates_.lop = this.privates_.lop || "and";\n        if (this.params_.$filter) {\n            this.params_.$filter = "(" + this.params_.$filter + ") " + this.privates_.lop + " (" + s + ")";\n        }\n        else {\n            this.params_.$filter = "(" + s + ")";\n        }\n        //clear object\n        this.privates_.left = null;\n        this.privates_.op = null;\n        this.privates_.right = null;\n        this.privates_.lop = null;\n        return this;\n    };\n    ClientDataQueryable.prototype.toFilter = function () {\n        return this.params_.$filter;\n    };\n    ClientDataQueryable.prototype.contains = function (value) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.op = \'ge\';\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(value));\n        this.privates_.right = 0;\n        return this.append_();\n    };\n    ClientDataQueryable.prototype.aggregate_ = function (fn) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'%s(%s)\', fn, this.privates_.left);\n        return this;\n    };\n    ClientDataQueryable.prototype.getDate = function () {\n        return this.aggregate_("date");\n    };\n    ClientDataQueryable.prototype.getDay = function () {\n        return this.aggregate_("day");\n    };\n    ClientDataQueryable.prototype.getMonth = function () {\n        return this.aggregate_("month");\n    };\n    ClientDataQueryable.prototype.getYear = function () {\n        return this.aggregate_("year");\n    };\n    ClientDataQueryable.prototype.getFullYear = function () {\n        return this.aggregate_("year");\n    };\n    ClientDataQueryable.prototype.getHours = function () {\n        return this.aggregate_("hour");\n    };\n    ClientDataQueryable.prototype.getMinutes = function () {\n        return this.aggregate_("minute");\n    };\n    ClientDataQueryable.prototype.getSeconds = function () {\n        return this.aggregate_("second");\n    };\n    ClientDataQueryable.prototype.length = function () {\n        return this.aggregate_("length");\n    };\n    ClientDataQueryable.prototype.trim = function () {\n        return this.aggregate_("trim");\n    };\n    ClientDataQueryable.prototype.toLocaleLowerCase = function () {\n        return this.aggregate_("tolower");\n    };\n    ClientDataQueryable.prototype.toLowerCase = function () {\n        return this.aggregate_("tolower");\n    };\n    ClientDataQueryable.prototype.toLocaleUpperCase = function () {\n        return this.aggregate_("toupper");\n    };\n    ClientDataQueryable.prototype.toUpperCase = function () {\n        return this.aggregate_("toupper");\n    };\n    ClientDataQueryable.prototype.round = function () {\n        return this.aggregate_("round");\n    };\n    ClientDataQueryable.prototype.floor = function () {\n        return this.aggregate_("floor");\n    };\n    ClientDataQueryable.prototype.ceil = function () {\n        return this.aggregate_("ceiling");\n    };\n    ClientDataQueryable.prototype.indexOf = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.substr = function (pos, length) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'substring(%s,%s,%s)\', this.privates_.left, pos, length);\n        return this;\n    };\n    ClientDataQueryable.prototype.startsWith = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'startswith(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.endsWith = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'endswith(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.select = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$select = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.groupBy = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$groupby = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.expand = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$expand = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.orderBy = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby = attr.toString();\n        return this;\n    };\n    ClientDataQueryable.prototype.thenBy = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString());\n        return this;\n    };\n    ClientDataQueryable.prototype.orderByDescending = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby = attr.toString() + " desc";\n        return this;\n    };\n    ClientDataQueryable.prototype.thenByDescending = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString()) + " desc";\n        return this;\n    };\n    ClientDataQueryable.prototype.skip = function (num) {\n        this.params_.$skip = num;\n        return this;\n    };\n    ClientDataQueryable.prototype.take = function (num) {\n        this.params_.$top = num;\n        return this;\n    };\n    ClientDataQueryable.prototype.first = function () {\n        delete this.params_.$top;\n        delete this.params_.$skip;\n        delete this.params_.$count;\n        this.params_.$first = true;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: []\n        });\n    };\n    ClientDataQueryable.prototype.list = function () {\n        delete this.params_.$first;\n        this.params_.$count = true;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: {}\n        });\n    };\n    ClientDataQueryable.prototype.item = function () {\n        return this.first();\n    };\n    ClientDataQueryable.prototype.getItem = function () {\n        return this.first();\n    };\n    ClientDataQueryable.prototype.items = function () {\n        delete this.params_.$first;\n        this.params_.$count = false;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: {}\n        });\n    };\n    ClientDataQueryable.prototype.getItems = function () {\n        return this.items();\n    };\n    ClientDataQueryable.prototype.getList = function () {\n        return this.list();\n    };\n    ClientDataQueryable.prototype.filter = function (s) {\n        common_1.Args.notEmpty("s", "Filter expression");\n        this.params_.$filter = s;\n        return this;\n    };\n    ClientDataQueryable.prototype.levels = function (n) {\n        common_1.Args.Positive(n, \'Levels\');\n        this.params_.$levels = n;\n        return this;\n    };\n    return ClientDataQueryable;\n}());\nexports.ClientDataQueryable = ClientDataQueryable;\nvar ClientDataModel = /** @class */ (function () {\n    function ClientDataModel(name, service) {\n        this.name_ = name;\n        this.service_ = service;\n    }\n    /**\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataModel.prototype.getService = function () {\n        return this.service_;\n    };\n    ClientDataModel.prototype.getName = function () {\n        return this.name_;\n    };\n    ClientDataModel.prototype.asQueryable = function () {\n        return ClientDataQueryable.create(this.getName(), this.service_);\n    };\n    ClientDataModel.prototype.where = function (attr) {\n        return this.asQueryable().where(attr);\n    };\n    ClientDataModel.prototype.select = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        var q = this.asQueryable();\n        return q.select.apply(q, attr);\n    };\n    ClientDataModel.prototype.skip = function (num) {\n        return this.asQueryable().skip(num);\n    };\n    ClientDataModel.prototype.take = function (num) {\n        return this.asQueryable().take(num);\n    };\n    ClientDataModel.prototype.save = function (obj) {\n        return this.getService().execute({\n            method: "POST",\n            url: common_1.TextUtils.format("/%s/index.json", this.getName()),\n            data: obj,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.schema = function () {\n        return this.getService().execute({ method: "GET",\n            url: common_1.TextUtils.format("/%s/schema.json", this.getName()),\n            data: null,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.remove = function (obj) {\n        return this.getService().execute({ method: "DELETE",\n            url: common_1.TextUtils.format("/%s/index.json", this.getName()),\n            data: obj,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.levels = function (n) {\n        common_1.Args.Positive(n, \'Levels\');\n        return this.asQueryable().levels(n);\n    };\n    return ClientDataModel;\n}());\nexports.ClientDataModel = ClientDataModel;\nvar ClientDataContext = /** @class */ (function () {\n    function ClientDataContext(service) {\n        this.service_ = service;\n    }\n    ClientDataContext.prototype.setBasicAuthorization = function (username, password) {\n        this.getService().setHeader("Authorization", "Basic " + common_1.TextUtils.toBase64(username + ":" + password));\n        return this;\n    };\n    ClientDataContext.prototype.setBearerAuthorization = function (access_token) {\n        this.getService().setHeader("Authorization", "Bearer " + access_token);\n        return this;\n    };\n    /**\n     * Gets a string which represents the base URL of the MOST Web Application Server.\n     * @returns {string}\n     */\n    ClientDataContext.prototype.getBase = function () {\n        return this.base_;\n    };\n    /**\n     * Sets a string which represents the base URL of the MOST Web Application Server.\n     */\n    ClientDataContext.prototype.setBase = function (value) {\n        common_1.Args.notEmpty(value, "Base URL");\n        this.base_ = value;\n        return this;\n    };\n    /**\n     * Gets the instance of ClientDataService class which is associated with this data context.\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataContext.prototype.getService = function () {\n        return this.service_;\n    };\n    /**\n     * Gets an instance of ClientDataModel class\n     * @param name - A string which represents the name of the data model.\n     * @returns {ClientDataModel}\n     */\n    ClientDataContext.prototype.model = function (name) {\n        common_1.Args.notEmpty(name, "Model name");\n        return new ClientDataModel(name, this.getService());\n    };\n    return ClientDataContext;\n}());\nexports.ClientDataContext = ClientDataContext;\nvar ClientDataService = /** @class */ (function () {\n    function ClientDataService(base) {\n        this.headers_ = {};\n        if (typeof base === \'undefined\' || base == null) {\n            this.base_ = "/";\n        }\n        else {\n            this.base_ = base;\n            if (!/\\/$/.test(this.base_)) {\n                this.base_ += "/";\n            }\n        }\n    }\n    ClientDataService.prototype.setHeader = function (name, value) {\n        this.headers_[name] = value;\n    };\n    ClientDataService.prototype.getHeaders = function () {\n        return this.headers_;\n    };\n    ClientDataService.prototype.getBase = function () {\n        return this.base_;\n    };\n    ClientDataService.prototype.resolve = function (relative) {\n        if (typeof relative === \'string\' && relative.length > 0) {\n            if (/^\\//.test(relative))\n                return this.getBase() + relative.substr(1);\n            else\n                return this.getBase() + relative;\n        }\n        throw new Error("Invalid argument. Expected a not empty string.");\n    };\n    ClientDataService.prototype.execute = function (options) {\n        throw new Error("Method not implemented.");\n    };\n    return ClientDataService;\n}());\nexports.ClientDataService = ClientDataService;\nvar DefaultUrlBuilder = /** @class */ (function () {\n    function DefaultUrlBuilder() {\n    }\n    DefaultUrlBuilder.prototype.getUrl = function (model) {\n        common_1.Args.notEmpty(model, "Model");\n        return common_1.TextUtils.format("/%s/index.json", model);\n    };\n    return DefaultUrlBuilder;\n}());\nexports.DefaultUrlBuilder = DefaultUrlBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')}]);