!function(Q){function U(B){if(F[B])return F[B].exports;var I=F[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,U),I.l=!0,I.exports}var F={};U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},U.p="",U(U.s=2)}([function(module,exports){eval("module.exports = angular;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYW5ndWxhclwiXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CodedError = /** @class */ (function (_super) {\n    __extends(CodedError, _super);\n    function CodedError(message, code) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        return _this;\n    }\n    return CodedError;\n}(Error));\nexports.CodedError = CodedError;\nvar Base64 = /** @class */ (function () {\n    function Base64() {\n        this.PADCHAR = \'=\';\n        this.ALPHA = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n    }\n    Base64.prototype.getByte = function (s, i) {\n        var x = s.charCodeAt(i);\n        return x;\n    };\n    Base64.prototype.getByte64 = function (s, i) {\n        var idx = this.ALPHA.indexOf(s.charAt(i));\n        return idx;\n    };\n    Base64.prototype.decode = function (s) {\n        var pads = 0, i, b10, imax = s.length, x = [];\n        s = String(s);\n        if (imax === 0) {\n            return s;\n        }\n        if (s.charAt(imax - 1) === this.PADCHAR) {\n            pads = 1;\n            if (s.charAt(imax - 2) === this.PADCHAR) {\n                pads = 2;\n            }\n            imax -= 4;\n        }\n        for (i = 0; i < imax; i += 4) {\n            b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6) | this.getByte64(s, i + 3);\n            x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255, b10 & 255));\n        }\n        switch (pads) {\n            case 1:\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12) | (this.getByte64(s, i + 2) << 6);\n                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 255));\n                break;\n            case 2:\n                b10 = (this.getByte64(s, i) << 18) | (this.getByte64(s, i + 1) << 12);\n                x.push(String.fromCharCode(b10 >> 16));\n                break;\n        }\n        return x.join(\'\');\n    };\n    Base64.prototype.encode = function (s) {\n        s = String(s);\n        var i, b10, x = [], imax = s.length - s.length % 3;\n        if (s.length === 0) {\n            return s;\n        }\n        for (i = 0; i < imax; i += 3) {\n            b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8) | this.getByte(s, i + 2);\n            x.push(this.ALPHA.charAt(b10 >> 18));\n            x.push(this.ALPHA.charAt((b10 >> 12) & 63));\n            x.push(this.ALPHA.charAt((b10 >> 6) & 63));\n            x.push(this.ALPHA.charAt(b10 & 63));\n        }\n        switch (s.length - imax) {\n            case 1:\n                b10 = this.getByte(s, i) << 16;\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.PADCHAR + this.PADCHAR);\n                break;\n            case 2:\n                b10 = (this.getByte(s, i) << 16) | (this.getByte(s, i + 1) << 8);\n                x.push(this.ALPHA.charAt(b10 >> 18) + this.ALPHA.charAt((b10 >> 12) & 63) + this.ALPHA.charAt((b10 >> 6) & 63) + this.PADCHAR);\n                break;\n        }\n        return x.join(\'\');\n    };\n    return Base64;\n}());\nexports.Base64 = Base64;\nvar TextUtils = /** @class */ (function () {\n    function TextUtils() {\n    }\n    TextUtils.isNotEmptyString = function (s) {\n        return (s != null) && (s != undefined) && (s.length > 0);\n    };\n    TextUtils.isNullOrUndefined = function (s) {\n        return (s != null) && (s != undefined);\n    };\n    TextUtils.zeroPad = function (num, length) {\n        num = num || 0;\n        var res = num.toString();\n        while (res.length < length) {\n            res = \'0\' + res;\n        }\n        return res;\n    };\n    TextUtils.isDate = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_DATETIME_ISO.test(s);\n        }\n        return false;\n    };\n    TextUtils.isGuid = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_GUID_STRING.test(s);\n        }\n        return false;\n    };\n    TextUtils.isAbsoluteURI = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_ABSOLUTE_URI.test(s);\n        }\n        return false;\n    };\n    TextUtils.isRelativeURI = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_RELATIVE_URI.test(s);\n        }\n        return false;\n    };\n    TextUtils.isNumber = function (s) {\n        if (typeof s === "string") {\n            return TextUtils.REG_NUMBER_STRING.test(s);\n        }\n        else if (typeof s === \'number\') {\n            return true;\n        }\n        return false;\n    };\n    TextUtils.parseDate = function (s) {\n        if (TextUtils.isDate(s)) {\n            return new Date(s);\n        }\n        return;\n    };\n    /**\n     * Encodes the given string to Base-64 format\n     * @param {string} s - A string to encode\n     * @returns {string}\n     */\n    TextUtils.toBase64 = function (s) {\n        var cv = new Base64();\n        return cv.encode(s);\n    };\n    /**\n     * Decodes the given string from Base-64 format\n     * @param {string} s - A base-64 encoded string\n     * @returns {string}\n     */\n    TextUtils.fromBase64 = function (s) {\n        var cv = new Base64();\n        return cv.decode(s);\n    };\n    TextUtils.format = function (s) {\n        var p = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            p[_i - 1] = arguments[_i];\n        }\n        var i = 0;\n        return s.replace(/%[sdfj%]/g, function (x) {\n            if (x === "%%")\n                return "%";\n            if (i >= p.length)\n                return x;\n            var p1 = p[i++];\n            if (((p1 == null) && (p1 == undefined))) {\n                return "";\n            }\n            switch (x) {\n                case "%s":\n                    return p1.toString();\n                case "%d":\n                    return parseInt(p1);\n                case "%f":\n                    return parseFloat(p1);\n                case "%j":\n                    return JSON.stringify(p1);\n                default:\n                    return x;\n            }\n        });\n    };\n    TextUtils.REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\n    TextUtils.REG_GUID_STRING = /^(\\{{0,1}([0-9a-fA-F]){8}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){4}-([0-9a-fA-F]){12}\\}{0,1})$/;\n    TextUtils.REG_ABSOLUTE_URI = /^((https?|ftps?):\\/\\/)([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;\n    TextUtils.REG_RELATIVE_URI = /^([\\/\\w .-]*)*\\/?$/;\n    TextUtils.REG_NUMBER_STRING = /^\\d+$/;\n    return TextUtils;\n}());\nexports.TextUtils = TextUtils;\nvar Args = /** @class */ (function () {\n    function Args() {\n    }\n    Args.check = function (expr, message, code) {\n        if (!expr) {\n            throw new CodedError(message, code || "EARG");\n        }\n    };\n    Args.notNull = function (obj, name) {\n        Args.check((obj != null) && (obj !== undefined), name + " may not be null or undefined", "ENULL");\n    };\n    Args.notEmpty = function (obj, name) {\n        Args.check((obj != null) && (obj !== undefined) && (obj.length > 0), name + " may not be empty", "ENULL");\n    };\n    Args.notNegative = function (obj, name) {\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\n        Args.check((obj >= 0), name + " may not be negative", "ENUMBER");\n    };\n    Args.Positive = function (obj, name) {\n        Args.check((typeof obj === \'number\'), name + " may be a number", "ENUMBER");\n        Args.check((obj > 0), name + " must be a positive number", "ENUMBER");\n    };\n    return Args;\n}());\nexports.Args = Args;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar angular = __webpack_require__(0);\nvar services_1 = __webpack_require__(3);\nvar ngModule = angular.module('most', [services_1.default]);\nfunction localized(text, localeSet) {\n    window[\"locales\"] = window[\"locales\"] || {};\n    localeSet = localeSet || 'global';\n    if (typeof text !== 'string')\n        return text;\n    if (text.length === 0)\n        return text;\n    var locale = window[\"locales\"][localeSet];\n    if (locale) {\n        var out = locale[text];\n        if (out)\n            return out;\n    }\n    return text;\n}\nfunction MostLocalizedDirective() {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n            if (attrs.title)\n                element.attr('title', localized(attrs.title, attrs['mostLoc']));\n            if (attrs.placeholder)\n                element.attr('placeholder', localized(attrs.placeholder, attrs['mostLoc']));\n        }\n    };\n}\nfunction MostLocalizedHtmlDirective() {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs) {\n            var text = localized(element.html(), attrs['mostLocHtml']);\n            if (text)\n                element.html(text);\n        }\n    };\n}\nfunction MostLocalizedFilter() {\n    return function (input, localeSet) {\n        return localized(input, localeSet);\n    };\n}\nfunction MostEventDirective($timeout) {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            //get event name\n            var name = element.attr('name') || attrs['event'], action = attrs['eventAction'];\n            if (name) {\n                scope.$on(name, function (event, args) {\n                    if (action) {\n                        $timeout(function () {\n                            scope.$args = args;\n                            try {\n                                scope.$apply(action);\n                            }\n                            catch (e) {\n                                console.log(e);\n                            }\n                            scope.$args = null;\n                        });\n                    }\n                });\n            }\n        }\n    };\n}\n/**\n * @return {IDirective}\n * @constructor\n */\nfunction MostWatchDirective() {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            //get event name\n            var name = element.attr('name') || attrs['event'], args = attrs['eventArgs'];\n            if (name) {\n                if (typeof scope.broadcast === 'function') {\n                    scope.$watch(args, function (value) {\n                        scope.broadcast(name, value);\n                    });\n                }\n                else {\n                    scope.$watch(args, function (value) {\n                        scope.emit(name, value);\n                    });\n                }\n            }\n        }\n    };\n}\nfunction MostItemDirective($window) {\n    return {\n        restrict: 'A',\n        scope: false,\n        link: function (scope, element, attrs) {\n            scope.route = $window.route;\n            var item = scope.$eval(attrs['mostItem']);\n            item.then(function (result) {\n                scope.item = result;\n            }, function (reason) {\n                console.log(reason);\n                scope.item = null;\n            });\n        }\n    };\n}\nfunction MostVariableDirective($timeout) {\n    return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n            if (attrs.ngValue) {\n                return scope.$eval(attrs.name + \"=\" + attrs.ngValue + \";\");\n            }\n            function set_(value) {\n                if (scope.$$phase === '$digest' || scope.$$phase === '$apply') {\n                    $timeout(function () {\n                        scope[attrs.name] = value;\n                    });\n                }\n                else {\n                    scope[attrs.name] = value;\n                }\n            }\n            scope.$watch(attrs.value, function (newValue) {\n                set_(newValue);\n            });\n        }\n    };\n}\nfunction MostParamDirective($window) {\n    return {\n        restrict: 'AE',\n        link: function (scope, element, attrs) {\n            scope.route = $window.route;\n            if (attrs['mostParam']) {\n                var values = attrs['mostParam'].split(';');\n                var params = {};\n                for (var i = 0; i < values.length; i++) {\n                    var value = values[i].split('=');\n                    if (value.length === 2)\n                        params[value[0]] = value[1];\n                }\n                $window.route = $window.route || {};\n                var _loop_1 = function (name_1) {\n                    if (params.hasOwnProperty(name_1)) {\n                        scope.$watch(params[name_1], function (newValue) {\n                            $window.route[name_1] = newValue;\n                        });\n                    }\n                };\n                for (var name_1 in params) {\n                    _loop_1(name_1);\n                }\n            }\n            else {\n                scope.$watch(attrs.value, function (newValue) {\n                    $window.route = $window.route || {};\n                    $window.route[attrs.name] = newValue;\n                });\n            }\n        }\n    };\n}\nfunction MostDataInstanceDirective($context, $parse, $window) {\n    return {\n        restrict: 'E',\n        scope: { model: '@', filter: '@', select: '@', group: '@', order: '@', top: '=', count: '=', skip: '=', expand: '@', prepared: '=', url: '@' },\n        link: function (scope, element, attrs) {\n            if (typeof scope.model === 'undefined')\n                return;\n            scope.route = $window.route;\n            var q = $context.model(scope.model).asQueryable();\n            var arr = [];\n            if (typeof scope.url === 'string' && scope.url.length > 0) {\n                q.setUrl(scope.url);\n            }\n            //apply select (if any)\n            if (scope.select) {\n                arr = scope.select.split(',');\n                //apply as array expression if we have only one field\n                if (arr.length == 1)\n                    q.asArray(true);\n                q.select(arr);\n            }\n            if (scope.group) {\n                if (angular.isArray(scope.group))\n                    q.group(scope.group);\n                else if (typeof scope.group === 'string' && scope.group.length > 0)\n                    q.group(scope.group.split(','));\n            }\n            if (scope.order) {\n                arr = [];\n                if (typeof scope.order === 'string' && scope.order.length > 0)\n                    arr = scope.order.split(',');\n                for (var i = 0; i < arr.length; i++) {\n                    var str = arr[i];\n                    var matches = /(.*?) desc$/i.exec(str);\n                    if (matches) {\n                        q.orderByDescending(matches[1]);\n                    }\n                    else {\n                        matches = /(.*?) asc$/i.exec(str);\n                        if (matches) {\n                            q.orderBy(matches[1]);\n                        }\n                        else {\n                            q.orderBy(str);\n                        }\n                    }\n                }\n            }\n            if (scope.skip > 0) {\n                q.skip(scope.skip);\n            }\n            if (scope.top > 0) {\n                q.take(scope.top);\n            }\n            if (scope.count) {\n                q.paged(true);\n            }\n            if (typeof scope.filter === 'string' && scope.filter.length > 0) {\n                q.filter(scope.filter);\n                if (scope.prepared) {\n                    q.prepare();\n                }\n            }\n            if (typeof scope.expand === 'string' && scope.expand.length > 0) {\n                q.expand(scope.expand.split(','));\n            }\n            //set queryable\n            q.getItems().then(function (result) {\n                var getter = $parse(attrs.name);\n                var setter;\n                if (getter)\n                    setter = getter.assign;\n                if (typeof setter === 'function') {\n                    setter(scope.$parent, (q.$top === 1) ? result[0] : result);\n                }\n            });\n            //register for order change\n            scope.$on('order.change', function (event, args) {\n                if (typeof args === 'string') {\n                    if (args.length === 0) {\n                        delete q.$orderby;\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                    else {\n                        var orders = args.split(',');\n                        if (orders.length === 1) {\n                            if (typeof q.$orderby !== 'undefined') {\n                                var previousOrders = q.$orderby.split(',');\n                                if (previousOrders.length === 1) {\n                                    var arr1 = orders[0].split(' '), arr2 = previousOrders[0].split(' ');\n                                    if (typeof arr1[1] === 'undefined') {\n                                        if (arr1[0] === arr2[0]) {\n                                            if ((typeof arr2[1] === 'undefined') || (arr2[1] === 'asc')) {\n                                                arr1.push('desc');\n                                                orders[0] = arr1.join(' ');\n                                            }\n                                            else {\n                                                arr1.push('asc');\n                                                orders[0] = arr1.join(' ');\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        q.reset().orderBy(orders.join(',')).getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            });\n            //register for filter change\n            scope.$on('filter.change', function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        if (typeof args.filter === 'string') {\n                            q.reset().filter(args.filter).getItems().then(function (result) {\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                            });\n                        }\n                    }\n                }\n                else if (typeof args === 'string') {\n                    q.reset().filter(args).getItems().then(function (result) {\n                        scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                    });\n                }\n            });\n            //register for filter change\n            scope.$on('page.change', function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        if (typeof args.page !== 'undefined') {\n                            var page = parseInt(args.page), size = scope.top;\n                            if (size <= 0) {\n                                return;\n                            }\n                            q.reset().skip((page - 1) * size).getItems().then(function (result) {\n                                scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                            });\n                        }\n                    }\n                }\n            });\n            var dataReload = function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.name === attrs.name) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n                else if (typeof args === 'string') {\n                    if (args === attrs.name) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            };\n            var dataRefresh = function (event, args) {\n                if (typeof args === 'object') {\n                    if (args.model === q.$model) {\n                        q.reset().getItems().then(function (result) {\n                            scope.$parent[attrs.name] = (q.$top === 1) ? result[0] : result;\n                        });\n                    }\n                }\n            };\n            //register for data reload\n            scope.$on('data.reload', dataReload);\n            //register for data refresh\n            scope.$on('item.new', dataRefresh);\n            //register for data refresh\n            scope.$on('item.save', dataRefresh);\n            //register for data refresh\n            scope.$on('item.delete', dataRefresh);\n        }\n    };\n}\nngModule.directive('loc', MostLocalizedDirective)\n    .directive('locHtml', MostLocalizedHtmlDirective)\n    .filter('loc', [MostLocalizedFilter])\n    .directive('mostEvent', MostEventDirective)\n    .directive('mostWatch', MostWatchDirective)\n    .directive('mostItem', MostItemDirective)\n    .directive('mostData', MostDataInstanceDirective)\n    .directive('mostVariable', MostVariableDirective)\n    .directive('mostParam', MostParamDirective);\nexports.default = ngModule.name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar angular = __webpack_require__(0);\nvar client_1 = __webpack_require__(4);\nvar ngModule = angular.module(\'most.services\', []);\nvar ContextProvider = /** @class */ (function () {\n    function ContextProvider() {\n        this.defaults = {\n            "base": "/",\n            "version": "0.0"\n        };\n    }\n    ContextProvider.prototype.$get = function ($http, $q) {\n        return new client_1.AngularDataContext(this.defaults.base, $http, $q);\n    };\n    ;\n    return ContextProvider;\n}());\nngModule.provider("$context", ContextProvider);\nexports.default = \'most.services\';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2FuZ3VsYXJqcy9zZXJ2aWNlcy50cz8yOGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBU0EscUNBQW9DO0FBQ3BDLHNDQUE0QztBQUU1QyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVyRDtJQUlJO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRztZQUNaLE1BQU0sRUFBQyxHQUFHO1lBQ1YsU0FBUyxFQUFDLEtBQUs7U0FDbEIsQ0FBQztJQUNOLENBQUM7SUFDRCw4QkFBSSxHQUFKLFVBQUssS0FBSyxFQUFFLEVBQUU7UUFDVixNQUFNLENBQUMsSUFBSSwyQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUFBLENBQUM7SUFDTixzQkFBQztBQUFELENBQUM7QUFDRCxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBQyxlQUFlLENBQUMsQ0FBQztBQUU5QyxrQkFBZSxlQUFlLENBQUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIE1PU1QgV2ViIEZyYW1ld29yayAyLjAgQ29kZW5hbWUgQmx1ZXNoaWZ0XG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcsIFRIRU1PU1QgTFAgQWxsIHJpZ2h0cyByZXNlcnZlZFxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIEJTRC0zLUNsYXVzZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vdGhlbW9zdC5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7SVNlcnZpY2VQcm92aWRlcn0gZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgYW5ndWxhciA9IHJlcXVpcmUoXCJhbmd1bGFyXCIpO1xuaW1wb3J0IHtBbmd1bGFyRGF0YUNvbnRleHR9IGZyb20gXCIuL2NsaWVudFwiO1xuXG5jb25zdCBuZ01vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdtb3N0LnNlcnZpY2VzJywgW10pO1xuXG5jbGFzcyBDb250ZXh0UHJvdmlkZXIgaW1wbGVtZW50cyBJU2VydmljZVByb3ZpZGVyIHtcblxuICAgIHB1YmxpYyBkZWZhdWx0czogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBcImJhc2VcIjpcIi9cIixcbiAgICAgICAgICAgIFwidmVyc2lvblwiOlwiMC4wXCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJGdldCgkaHR0cCwgJHEpOiBhbnkge1xuICAgICAgICByZXR1cm4gbmV3IEFuZ3VsYXJEYXRhQ29udGV4dCh0aGlzLmRlZmF1bHRzLmJhc2UsICRodHRwLCAkcSk7XG4gICAgfTtcbn1cbm5nTW9kdWxlLnByb3ZpZGVyKFwiJGNvbnRleHRcIixDb250ZXh0UHJvdmlkZXIpO1xuXG5leHBvcnQgZGVmYXVsdCAnbW9zdC5zZXJ2aWNlcyc7XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL21vZHVsZXMvQHRoZW1vc3QvYW5ndWxhcmpzL3NlcnZpY2VzLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nvar common_1 = __webpack_require__(1);\nvar client_1 = __webpack_require__(5);\nvar REG_DATETIME_ISO = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?([+-](\\d+):(\\d+))?$/;\nfunction dateParser(key, value) {\n    if ((typeof value === \'string\') && REG_DATETIME_ISO.test(value)) {\n        return new Date(value);\n    }\n    return value;\n}\nvar AngularDataContext = /** @class */ (function (_super) {\n    __extends(AngularDataContext, _super);\n    function AngularDataContext(base, http, q) {\n        return _super.call(this, new AngularDataService(base || "/", http, q)) || this;\n    }\n    return AngularDataContext;\n}(client_1.ClientDataContext));\nexports.AngularDataContext = AngularDataContext;\nvar AngularDataService = /** @class */ (function (_super) {\n    __extends(AngularDataService, _super);\n    /**\n     *\n     * @param {string} base\n     * @param {*} http\n     * @param {*} q\n     */\n    function AngularDataService(base, http, q) {\n        var _this = _super.call(this, base) || this;\n        _this.http = http;\n        _this.q = q;\n        return _this;\n    }\n    AngularDataService.prototype.execute = function (options) {\n        var _this = this;\n        var $http = this.http;\n        var $q = this.q;\n        return $q(function (resolve, reject) {\n            try {\n                //options defaults\n                options.method = options.method || "GET";\n                options.headers = __assign({}, _this.getHeaders(), options.headers);\n                //set content type\n                options.headers["Content-Type"] = "application/json";\n                //validate options URL\n                common_1.Args.notNull(options.url, "Request URL");\n                //validate URL format\n                common_1.Args.check(!/^https?:\\/\\//i.test(options.url), "Request URL may not be an absolute URI");\n                //validate request method\n                common_1.Args.check(/^GET|POST|PUT|DELETE$/i.test(options.method), "Invalid request method. Expected GET, POST, PUT or DELETE.");\n                var url_ = _this.resolve(options.url);\n                var o = {\n                    method: options.method,\n                    url: url_,\n                    headers: options.headers,\n                    transformResponse: function (data, headers, status) {\n                        if (typeof data === \'undefined\' || data === null) {\n                            return;\n                        }\n                        if (/^application\\/json/.test(headers("Content-Type"))) {\n                            if (data.length === 0) {\n                                return;\n                            }\n                            return JSON.parse(data, dateParser);\n                        }\n                        return data;\n                    }\n                };\n                if (/^GET$/i.test(o.method)) {\n                    o["params"] = options.data;\n                }\n                else {\n                    o["data"] = options.data;\n                }\n                $http(o).then(function (response) {\n                    resolve(response.data);\n                }, function (err) {\n                    reject(err);\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    };\n    return AngularDataService;\n}(client_1.ClientDataService));\nexports.AngularDataService = AngularDataService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nObject.defineProperty(exports, "__esModule", { value: true });\nvar common_1 = __webpack_require__(1);\nvar ClientQueryExpression = /** @class */ (function () {\n    function ClientQueryExpression() {\n    }\n    return ClientQueryExpression;\n}());\nvar ClientDataQueryable = /** @class */ (function () {\n    function ClientDataQueryable(model, service) {\n        common_1.Args.notEmpty(model, "Model");\n        this.model_ = model;\n        common_1.Args.notNull(service, "Data Service");\n        this.service_ = service;\n        this.url_ = common_1.TextUtils.format("%s/index.json", this.model_);\n        //init params\n        this.params_ = {};\n        //init privates\n        this.privates_ = new ClientQueryExpression();\n    }\n    /**\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataQueryable.prototype.getService = function () {\n        return this.service_;\n    };\n    /**\n     * @returns {DataServiceQueryParams}\n     */\n    ClientDataQueryable.prototype.getParams = function () {\n        return this.params_;\n    };\n    /**\n     * @returns {ClientDataQueryable}\n     */\n    ClientDataQueryable.prototype.setParam = function (name, value) {\n        if (/^\\$/.test(name)) {\n            this.params_[name] = value;\n        }\n        else {\n            this.params_["$" + name] = value;\n        }\n        return this;\n    };\n    /**\n     * Gets a string which represents the name of the data model associated with this object.\n     * @returns {string}\n     */\n    ClientDataQueryable.prototype.getModel = function () {\n        return this.model_;\n    };\n    /**\n     * Gets a string which represents the relative URL associated with this object.\n     * @returns {string}\n     */\n    ClientDataQueryable.prototype.getUrl = function () {\n        return this.url_;\n    };\n    /**\n     * Sets the relative URL associated with this object.\n     * @param value - A string which represents a relative URI.\n     */\n    ClientDataQueryable.prototype.setUrl = function (value) {\n        common_1.Args.notEmpty(value, "URL");\n        common_1.Args.check(!common_1.TextUtils.isAbsoluteURI(value), "URL must be a relative URI");\n        this.url_ = value;\n    };\n    ClientDataQueryable.create = function (model, service) {\n        return new ClientDataQueryable(model, service);\n    };\n    ClientDataQueryable.prototype.append_ = function () {\n        common_1.Args.notNull(this.privates_.left, "Left operand");\n        common_1.Args.notNull(this.privates_.op, "Comparison operator");\n        var expr;\n        if (Array.isArray(this.privates_.right)) {\n            common_1.Args.check((this.privates_.op === "eq") || (this.privates_.op === "ne"), "Wrong operator. Expected equal or not equal");\n            common_1.Args.check(this.privates_.right.length > 0, "Array may not be empty");\n            var arr = this.privates_.right.map(function (x) {\n                return this.privates_.left + " " + this.privates_.op + " " + this.escape_(x);\n            });\n            if (this.privates_.op === "eq") {\n                expr = "(" + arr.join(" or ") + ")";\n            }\n            else {\n                expr = "(" + arr.join(" or ") + ")";\n            }\n        }\n        else {\n            expr = this.privates_.left + " " + this.privates_.op + " " + this.escape_(this.privates_.right);\n        }\n        this.privates_.lop = this.privates_.lop || "and";\n        if (common_1.TextUtils.isNotEmptyString(this.params_.$filter)) {\n            this.params_.$filter = this.params_.$filter + " " + this.privates_.lop + " " + expr;\n        }\n        else {\n            this.params_.$filter = expr;\n        }\n        //clear object\n        this.privates_.left = null;\n        this.privates_.op = null;\n        this.privates_.right = null;\n        return this;\n    };\n    ClientDataQueryable.prototype.escape_ = function (val) {\n        if ((val == null) || (val == undefined)) {\n            return "null";\n        }\n        if (typeof val === \'boolean\') {\n            return (val) ? "true" : "false";\n        }\n        if (typeof val === \'number\') {\n            return val + "";\n        }\n        if (val instanceof Date) {\n            var dt = new Date(val);\n            var year = dt.getFullYear();\n            var month = common_1.TextUtils.zeroPad(dt.getMonth() + 1, 2);\n            var day = common_1.TextUtils.zeroPad(dt.getDate(), 2);\n            var hour = common_1.TextUtils.zeroPad(dt.getHours(), 2);\n            var minute = common_1.TextUtils.zeroPad(dt.getMinutes(), 2);\n            var second = common_1.TextUtils.zeroPad(dt.getSeconds(), 2);\n            var millisecond = common_1.TextUtils.zeroPad(dt.getMilliseconds(), 3);\n            //format timezone\n            var offset = (new Date()).getTimezoneOffset(), timezone = (offset >= 0 ? \'+\' : \'\') + common_1.TextUtils.zeroPad(Math.floor(offset / 60), 2) + \':\' + common_1.TextUtils.zeroPad(offset % 60, 2);\n            return "\'" + year + \'-\' + month + \'-\' + day + \' \' + hour + \':\' + minute + \':\' + second + \'.\' + millisecond + timezone + "\'";\n        }\n        if (val instanceof Array) {\n            var values_1 = [];\n            val.forEach(function (x) {\n                values_1.push(this.escape_(x));\n            });\n            return values_1.join(\',\');\n        }\n        if (typeof val === "string") {\n            var res = val.replace(/[\\0\\n\\r\\b\\t\\\\\'"\\x1a]/g, function (s) {\n                switch (s) {\n                    case "\\0": return "\\\\0";\n                    case "\\n": return "\\\\n";\n                    case "\\r": return "\\\\r";\n                    case "\\b": return "\\\\b";\n                    case "\\t": return "\\\\t";\n                    case "\\x1a": return "\\\\Z";\n                    default: return "\\\\" + s;\n                }\n            });\n            return "\'" + res + "\'";\n        }\n        //otherwise get valueOf\n        if (val.hasOwnProperty("$name"))\n            return val["$name"];\n        else\n            return this.escape_(val.valueOf());\n    };\n    ClientDataQueryable.prototype.where = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        return this;\n    };\n    ClientDataQueryable.prototype.and = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "and";\n        return this;\n    };\n    ClientDataQueryable.prototype.andAlso = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "and";\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\n            this.params_.$filter = "(" + this.params_.$filter + ")";\n        }\n        return this;\n    };\n    ClientDataQueryable.prototype.or = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "or";\n        return this;\n    };\n    ClientDataQueryable.prototype.orElse = function (name) {\n        common_1.Args.notEmpty(name, "Left operand");\n        this.privates_.left = name;\n        this.privates_.lop = "or";\n        if (!common_1.TextUtils.isNullOrUndefined(this.params_.$filter)) {\n            this.params_.$filter = "(" + this.params_.$filter + ")";\n        }\n        return this;\n    };\n    ClientDataQueryable.prototype.compare_ = function (op, value) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.op = op;\n        this.privates_.right = value;\n        return this.append_();\n    };\n    ClientDataQueryable.prototype.equal = function (value) {\n        return this.compare_("eq", value);\n    };\n    ClientDataQueryable.prototype.notEqual = function (value) {\n        return this.compare_("ne", value);\n    };\n    ClientDataQueryable.prototype.greaterThan = function (value) {\n        return this.compare_("gt", value);\n    };\n    ClientDataQueryable.prototype.greaterOrEqual = function (value) {\n        return this.compare_("ge", value);\n    };\n    ClientDataQueryable.prototype.lowerThan = function (value) {\n        return this.compare_("lt", value);\n    };\n    ClientDataQueryable.prototype.lowerOrEqual = function (value) {\n        return this.compare_("le", value);\n    };\n    /**\n     * @param {*} value1\n     * @param {*} value2\n     * @returns {ClientDataQueryable}\n     */\n    ClientDataQueryable.prototype.between = function (value1, value2) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        //generate new filter\n        var s = ClientDataQueryable.create(this.getModel())\n            .where(this.privates_.left).greaterOrEqual(value1)\n            .and(this.privates_.left).lowerOrEqual(value2).toFilter();\n        this.privates_.lop = this.privates_.lop || "and";\n        if (this.params_.$filter) {\n            this.params_.$filter = "(" + this.params_.$filter + ") " + this.privates_.lop + " (" + s + ")";\n        }\n        else {\n            this.params_.$filter = "(" + s + ")";\n        }\n        //clear object\n        this.privates_.left = null;\n        this.privates_.op = null;\n        this.privates_.right = null;\n        this.privates_.lop = null;\n        return this;\n    };\n    ClientDataQueryable.prototype.toFilter = function () {\n        return this.params_.$filter;\n    };\n    ClientDataQueryable.prototype.contains = function (value) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.op = \'ge\';\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(value));\n        this.privates_.right = 0;\n        return this.append_();\n    };\n    ClientDataQueryable.prototype.aggregate_ = function (fn) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'%s(%s)\', fn, this.privates_.left);\n        return this;\n    };\n    ClientDataQueryable.prototype.getDate = function () {\n        return this.aggregate_("date");\n    };\n    ClientDataQueryable.prototype.getDay = function () {\n        return this.aggregate_("day");\n    };\n    ClientDataQueryable.prototype.getMonth = function () {\n        return this.aggregate_("month");\n    };\n    ClientDataQueryable.prototype.getYear = function () {\n        return this.aggregate_("year");\n    };\n    ClientDataQueryable.prototype.getFullYear = function () {\n        return this.aggregate_("year");\n    };\n    ClientDataQueryable.prototype.getHours = function () {\n        return this.aggregate_("hour");\n    };\n    ClientDataQueryable.prototype.getMinutes = function () {\n        return this.aggregate_("minute");\n    };\n    ClientDataQueryable.prototype.getSeconds = function () {\n        return this.aggregate_("second");\n    };\n    ClientDataQueryable.prototype.length = function () {\n        return this.aggregate_("length");\n    };\n    ClientDataQueryable.prototype.trim = function () {\n        return this.aggregate_("trim");\n    };\n    ClientDataQueryable.prototype.toLocaleLowerCase = function () {\n        return this.aggregate_("tolower");\n    };\n    ClientDataQueryable.prototype.toLowerCase = function () {\n        return this.aggregate_("tolower");\n    };\n    ClientDataQueryable.prototype.toLocaleUpperCase = function () {\n        return this.aggregate_("toupper");\n    };\n    ClientDataQueryable.prototype.toUpperCase = function () {\n        return this.aggregate_("toupper");\n    };\n    ClientDataQueryable.prototype.round = function () {\n        return this.aggregate_("round");\n    };\n    ClientDataQueryable.prototype.floor = function () {\n        return this.aggregate_("floor");\n    };\n    ClientDataQueryable.prototype.ceil = function () {\n        return this.aggregate_("ceiling");\n    };\n    ClientDataQueryable.prototype.indexOf = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'indexof(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.substr = function (pos, length) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'substring(%s,%s,%s)\', this.privates_.left, pos, length);\n        return this;\n    };\n    ClientDataQueryable.prototype.startsWith = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'startswith(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.endsWith = function (s) {\n        common_1.Args.notNull(this.privates_.left, "The left operand");\n        this.privates_.left = common_1.TextUtils.format(\'endswith(%s,%s)\', this.privates_.left, this.escape_(s));\n        return this;\n    };\n    ClientDataQueryable.prototype.select = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$select = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.groupBy = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$groupby = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.expand = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        common_1.Args.notNull(attr, "Attributes");\n        common_1.Args.check(attr.length > 0, "Attributes may not be empty");\n        var arr = [];\n        for (var i = 0; i < attr.length; i++) {\n            common_1.Args.check(typeof attr[i] === "string", "Invalid attribute. Expected string.");\n            arr.push(attr[i]);\n        }\n        this.params_.$expand = arr.join(",");\n        return this;\n    };\n    ClientDataQueryable.prototype.orderBy = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby = attr.toString();\n        return this;\n    };\n    ClientDataQueryable.prototype.thenBy = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString());\n        return this;\n    };\n    ClientDataQueryable.prototype.orderByDescending = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby = attr.toString() + " desc";\n        return this;\n    };\n    ClientDataQueryable.prototype.thenByDescending = function (attr) {\n        common_1.Args.notEmpty(attr, "Order by attribute");\n        this.params_.$orderby += (this.params_.$orderby ? \',\' + attr.toString() : attr.toString()) + " desc";\n        return this;\n    };\n    ClientDataQueryable.prototype.skip = function (num) {\n        this.params_.$skip = num;\n        return this;\n    };\n    ClientDataQueryable.prototype.take = function (num) {\n        this.params_.$top = num;\n        return this;\n    };\n    ClientDataQueryable.prototype.first = function () {\n        delete this.params_.$top;\n        delete this.params_.$skip;\n        delete this.params_.$count;\n        this.params_.$first = true;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: []\n        });\n    };\n    ClientDataQueryable.prototype.list = function () {\n        delete this.params_.$first;\n        this.params_.$count = true;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: {}\n        });\n    };\n    ClientDataQueryable.prototype.item = function () {\n        return this.first();\n    };\n    ClientDataQueryable.prototype.getItem = function () {\n        return this.first();\n    };\n    ClientDataQueryable.prototype.items = function () {\n        delete this.params_.$first;\n        this.params_.$count = false;\n        return this.getService().execute({\n            method: "GET",\n            url: this.getUrl(),\n            data: this.params_,\n            headers: {}\n        });\n    };\n    ClientDataQueryable.prototype.getItems = function () {\n        return this.items();\n    };\n    ClientDataQueryable.prototype.getList = function () {\n        return this.list();\n    };\n    ClientDataQueryable.prototype.filter = function (s) {\n        common_1.Args.notEmpty("s", "Filter expression");\n        this.params_.$filter = s;\n        return this;\n    };\n    ClientDataQueryable.prototype.levels = function (n) {\n        common_1.Args.Positive(n, \'Levels\');\n        this.params_.$levels = n;\n        return this;\n    };\n    return ClientDataQueryable;\n}());\nexports.ClientDataQueryable = ClientDataQueryable;\nvar ClientDataModel = /** @class */ (function () {\n    function ClientDataModel(name, service) {\n        var _this = this;\n        this.name_ = name;\n        this.service_ = service;\n        this.hasNavigationLinkFunc = function () {\n            return common_1.TextUtils.format("%s/index.json", _this.getName());\n        };\n        this.hasReadLinkFunc = function (id) {\n            return common_1.TextUtils.format("%s/%s/index.json", _this.getName(), id);\n        };\n        this.hasEditLinkFunc = function (id) {\n            return common_1.TextUtils.format("%s/%s/index.json", _this.getName(), id);\n        };\n    }\n    ClientDataModel.prototype.hasNavigationLink = function (func) {\n        this.hasNavigationLinkFunc = func;\n    };\n    ClientDataModel.prototype.hasEditLink = function (func) {\n        this.hasEditLinkFunc = func;\n    };\n    ClientDataModel.prototype.hasReadLink = function (func) {\n        this.hasReadLinkFunc = func;\n    };\n    ClientDataModel.prototype.getNavigationLink = function () {\n        return this.hasNavigationLinkFunc();\n    };\n    ClientDataModel.prototype.getReadLink = function (id) {\n        return this.hasReadLinkFunc(id);\n    };\n    ClientDataModel.prototype.getEditLink = function (id) {\n        return this.hasEditLinkFunc(id);\n    };\n    /**\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataModel.prototype.getService = function () {\n        return this.service_;\n    };\n    ClientDataModel.prototype.getName = function () {\n        return this.name_;\n    };\n    ClientDataModel.prototype.asQueryable = function () {\n        return ClientDataQueryable.create(this.getName(), this.service_);\n    };\n    ClientDataModel.prototype.where = function (attr) {\n        return this.asQueryable().where(attr);\n    };\n    ClientDataModel.prototype.select = function () {\n        var attr = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            attr[_i] = arguments[_i];\n        }\n        var q = this.asQueryable();\n        return q.select.apply(q, attr);\n    };\n    ClientDataModel.prototype.skip = function (num) {\n        return this.asQueryable().skip(num);\n    };\n    ClientDataModel.prototype.take = function (num) {\n        return this.asQueryable().take(num);\n    };\n    ClientDataModel.prototype.save = function (obj) {\n        return this.getService().execute({\n            method: "POST",\n            url: common_1.TextUtils.format("%s/index.json", this.getName()),\n            data: obj,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.schema = function () {\n        return this.getService().execute({ method: "GET",\n            url: common_1.TextUtils.format("%s/schema.json", this.getName()),\n            data: null,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.remove = function (obj) {\n        return this.getService().execute({ method: "DELETE",\n            url: common_1.TextUtils.format("%s/index.json", this.getName()),\n            data: obj,\n            headers: {}\n        });\n    };\n    ClientDataModel.prototype.levels = function (n) {\n        common_1.Args.Positive(n, \'Levels\');\n        return this.asQueryable().levels(n);\n    };\n    return ClientDataModel;\n}());\nexports.ClientDataModel = ClientDataModel;\nvar ClientDataContext = /** @class */ (function () {\n    function ClientDataContext(service) {\n        this.service_ = service;\n    }\n    ClientDataContext.prototype.setBasicAuthorization = function (username, password) {\n        this.getService().setHeader("Authorization", "Basic " + common_1.TextUtils.toBase64(username + ":" + password));\n        return this;\n    };\n    ClientDataContext.prototype.setBearerAuthorization = function (access_token) {\n        this.getService().setHeader("Authorization", "Bearer " + access_token);\n        return this;\n    };\n    /**\n     * Gets a string which represents the base URL of the MOST Web Application Server.\n     * @returns {string}\n     */\n    ClientDataContext.prototype.getBase = function () {\n        return this.base_;\n    };\n    /**\n     * Sets a string which represents the base URL of the MOST Web Application Server.\n     */\n    ClientDataContext.prototype.setBase = function (value) {\n        common_1.Args.notEmpty(value, "Base URL");\n        this.base_ = value;\n        return this;\n    };\n    /**\n     * Gets the instance of ClientDataService class which is associated with this data context.\n     * @returns {ClientDataServiceBase}\n     */\n    ClientDataContext.prototype.getService = function () {\n        return this.service_;\n    };\n    /**\n     * Gets an instance of ClientDataModel class\n     * @param name - A string which represents the name of the data model.\n     * @returns {ClientDataModel}\n     */\n    ClientDataContext.prototype.model = function (name) {\n        common_1.Args.notEmpty(name, "Model name");\n        return new ClientDataModel(name, this.getService());\n    };\n    return ClientDataContext;\n}());\nexports.ClientDataContext = ClientDataContext;\nvar ClientDataService = /** @class */ (function () {\n    function ClientDataService(base) {\n        this.headers_ = {};\n        if (typeof base === \'undefined\' || base == null) {\n            this.base_ = "/";\n        }\n        else {\n            this.base_ = base;\n            if (!/\\/$/.test(this.base_)) {\n                this.base_ += "/";\n            }\n        }\n    }\n    ClientDataService.prototype.setHeader = function (name, value) {\n        this.headers_[name] = value;\n    };\n    ClientDataService.prototype.getHeaders = function () {\n        return this.headers_;\n    };\n    ClientDataService.prototype.getBase = function () {\n        return this.base_;\n    };\n    ClientDataService.prototype.resolve = function (relative) {\n        if (typeof relative === \'string\' && relative.length > 0) {\n            if (/^\\//.test(relative))\n                return this.getBase() + relative.substr(1);\n            else\n                return this.getBase() + relative;\n        }\n        throw new Error("Invalid argument. Expected a not empty string.");\n    };\n    ClientDataService.prototype.execute = function (options) {\n        throw new Error("Method not implemented.");\n    };\n    return ClientDataService;\n}());\nexports.ClientDataService = ClientDataService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9tb2R1bGVzL0B0aGVtb3N0L2NsaWVudC9pbmRleC50cz84ZWFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7OztHQU9HOztBQUVILHNDQUF5STtBQUV6STtJQUFBO0lBS0EsQ0FBQztJQUFELDRCQUFDO0FBQUQsQ0FBQztBQUVEO0lBUUksNkJBQVksS0FBWSxFQUFFLE9BQThCO1FBQ3BELGFBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLGFBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsa0JBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRCxhQUFhO1FBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFHLENBQUM7UUFDbkIsZUFBZTtRQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNILHdDQUFVLEdBQVY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSCx1Q0FBUyxHQUFUO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsc0NBQVEsR0FBUixVQUFTLElBQVcsRUFBRSxLQUFTO1FBQzNCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQy9CLENBQUM7UUFD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VUFBUSxRQUFnQjtRQUNwQixFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsS0FBSyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJO2dCQUNBLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLENBQUM7UUFDRCxNQUFPLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUdELG1DQUFPLEdBQVAsVUFBUSxPQUFrQztRQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVMLHdCQUFDO0FBQUQsQ0FBQztBQS9DWSw4Q0FBaUIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIE1PU1QgV2ViIEZyYW1ld29yayAyLjAgQ29kZW5hbWUgQmx1ZXNoaWZ0XG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcsIFRIRU1PU1QgTFAgQWxsIHJpZ2h0cyByZXNlcnZlZFxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIEJTRC0zLUNsYXVzZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vdGhlbW9zdC5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtDbGllbnREYXRhU2VydmljZUJhc2UsIENsaWVudERhdGFDb250ZXh0QmFzZSwgVGV4dFV0aWxzLCBEYXRhU2VydmljZVF1ZXJ5UGFyYW1zLCBEYXRhU2VydmljZUV4ZWN1dGVPcHRpb25zLEFyZ3N9IGZyb20gJy4vY29tbW9uJztcblxuY2xhc3MgQ2xpZW50UXVlcnlFeHByZXNzaW9uIHtcbiAgICBwdWJsaWMgbGVmdDphbnk7XG4gICAgcHVibGljIG9wOnN0cmluZztcbiAgICBwdWJsaWMgbG9wOnN0cmluZztcbiAgICBwdWJsaWMgcmlnaHQ6YW55O1xufVxuXG5leHBvcnQgY2xhc3MgQ2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG5cbiAgICBwcml2YXRlIG1vZGVsXzpzdHJpbmc7XG4gICAgcHJpdmF0ZSB1cmxfOnN0cmluZztcbiAgICBwcml2YXRlIHNlcnZpY2VfOkNsaWVudERhdGFTZXJ2aWNlQmFzZTtcbiAgICBwcml2YXRlIHBhcmFtc186YW55O1xuICAgIHByaXZhdGUgcHJpdmF0ZXNfOkNsaWVudFF1ZXJ5RXhwcmVzc2lvbjtcblxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOnN0cmluZywgc2VydmljZTogQ2xpZW50RGF0YVNlcnZpY2VCYXNlKSB7XG4gICAgICAgIEFyZ3Mubm90RW1wdHkobW9kZWwsIFwiTW9kZWxcIik7XG4gICAgICAgIHRoaXMubW9kZWxfID0gbW9kZWw7XG4gICAgICAgIEFyZ3Mubm90TnVsbChzZXJ2aWNlLCBcIkRhdGEgU2VydmljZVwiKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlXyA9IHNlcnZpY2U7XG4gICAgICAgIHRoaXMudXJsXyA9IFRleHRVdGlscy5mb3JtYXQoXCIlcy9pbmRleC5qc29uXCIsIHRoaXMubW9kZWxfKTtcbiAgICAgICAgLy9pbml0IHBhcmFtc1xuICAgICAgICB0aGlzLnBhcmFtc18gPSB7IH07XG4gICAgICAgIC8vaW5pdCBwcml2YXRlc1xuICAgICAgICB0aGlzLnByaXZhdGVzXyA9IG5ldyBDbGllbnRRdWVyeUV4cHJlc3Npb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Q2xpZW50RGF0YVNlcnZpY2VCYXNlfVxuICAgICAqL1xuICAgIGdldFNlcnZpY2UoKTogQ2xpZW50RGF0YVNlcnZpY2VCYXNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZV87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0RhdGFTZXJ2aWNlUXVlcnlQYXJhbXN9XG4gICAgICovXG4gICAgZ2V0UGFyYW1zKCk6IERhdGFTZXJ2aWNlUXVlcnlQYXJhbXMge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXNfO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtDbGllbnREYXRhUXVlcnlhYmxlfVxuICAgICAqL1xuICAgIHNldFBhcmFtKG5hbWU6c3RyaW5nLCB2YWx1ZTphbnkpOiBDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgaWYgKC9eXFwkLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtc19bbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zX1tcIiRcIiArIG5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyB3aGljaCByZXByZXNlbnRzIHRoZSBuYW1lIG9mIHRoZSBkYXRhIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldE1vZGVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsXztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3RyaW5nIHdoaWNoIHJlcHJlc2VudHMgdGhlIHJlbGF0aXZlIFVSTCBhc3NvY2lhdGVkIHdpdGggdGhpcyBvYmplY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRVcmwoKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy51cmxfO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHJlbGF0aXZlIFVSTCBhc3NvY2lhdGVkIHdpdGggdGhpcyBvYmplY3QuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gQSBzdHJpbmcgd2hpY2ggcmVwcmVzZW50cyBhIHJlbGF0aXZlIFVSSS5cbiAgICAgKi9cbiAgICBzZXRVcmwodmFsdWU6c3RyaW5nKSB7XG4gICAgICAgIEFyZ3Mubm90RW1wdHkodmFsdWUsXCJVUkxcIik7XG4gICAgICAgIEFyZ3MuY2hlY2soIVRleHRVdGlscy5pc0Fic29sdXRlVVJJKHZhbHVlKSwgXCJVUkwgbXVzdCBiZSBhIHJlbGF0aXZlIFVSSVwiKTtcbiAgICAgICAgdGhpcy51cmxfID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShtb2RlbDpzdHJpbmcsIHNlcnZpY2U/OiBDbGllbnREYXRhU2VydmljZUJhc2UpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gbmV3IENsaWVudERhdGFRdWVyeWFibGUobW9kZWwsIHNlcnZpY2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwZW5kXygpIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKHRoaXMucHJpdmF0ZXNfLmxlZnQsXCJMZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIEFyZ3Mubm90TnVsbCh0aGlzLnByaXZhdGVzXy5vcCxcIkNvbXBhcmlzb24gb3BlcmF0b3JcIik7XG4gICAgICAgIGxldCBleHByO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnByaXZhdGVzXy5yaWdodCkpIHtcbiAgICAgICAgICAgIEFyZ3MuY2hlY2soKHRoaXMucHJpdmF0ZXNfLm9wPT09XCJlcVwiKSB8fCAodGhpcy5wcml2YXRlc18ub3A9PT1cIm5lXCIpLFwiV3Jvbmcgb3BlcmF0b3IuIEV4cGVjdGVkIGVxdWFsIG9yIG5vdCBlcXVhbFwiKTtcbiAgICAgICAgICAgIEFyZ3MuY2hlY2sodGhpcy5wcml2YXRlc18ucmlnaHQubGVuZ3RoPjAsXCJBcnJheSBtYXkgbm90IGJlIGVtcHR5XCIpO1xuICAgICAgICAgICAgY29uc3QgYXJyID0gdGhpcy5wcml2YXRlc18ucmlnaHQubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlc18ubGVmdCArIFwiIFwiICsgdGhpcy5wcml2YXRlc18ub3AgKyBcIiBcIiArIHRoaXMuZXNjYXBlXyh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpdmF0ZXNfLm9wID09PSBcImVxXCIpIHtcbiAgICAgICAgICAgICAgICBleHByID0gXCIoXCIgKyBhcnIuam9pbihcIiBvciBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4cHIgPSBcIihcIiArIGFyci5qb2luKFwiIG9yIFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwciA9IHRoaXMucHJpdmF0ZXNfLmxlZnQgKyBcIiBcIiArIHRoaXMucHJpdmF0ZXNfLm9wICsgXCIgXCIgKyB0aGlzLmVzY2FwZV8odGhpcy5wcml2YXRlc18ucmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLmxvcCA9IHRoaXMucHJpdmF0ZXNfLmxvcCB8fCBcImFuZFwiO1xuICAgICAgICBpZiAoVGV4dFV0aWxzLmlzTm90RW1wdHlTdHJpbmcodGhpcy5wYXJhbXNfLiRmaWx0ZXIpKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtc18uJGZpbHRlciA9IHRoaXMucGFyYW1zXy4kZmlsdGVyICsgXCIgXCIgKyB0aGlzLnByaXZhdGVzXy5sb3AgKyBcIiBcIiArIGV4cHI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtc18uJGZpbHRlciA9IGV4cHI7XG4gICAgICAgIH1cbiAgICAgICAgLy9jbGVhciBvYmplY3RcbiAgICAgICAgdGhpcy5wcml2YXRlc18ubGVmdCA9IG51bGw7IHRoaXMucHJpdmF0ZXNfLm9wID0gbnVsbDsgdGhpcy5wcml2YXRlc18ucmlnaHQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuXG4gICAgcHJpdmF0ZSBlc2NhcGVfKHZhbDphbnkpIHtcbiAgICAgICAgaWYgKCh2YWwgPT0gbnVsbCkgfHwgKHZhbD09dW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsKSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbCtcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBkdCA9IG5ldyBEYXRlKHZhbCk7XG4gICAgICAgICAgICBjb25zdCB5ZWFyICAgPSBkdC5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgY29uc3QgbW9udGggID0gVGV4dFV0aWxzLnplcm9QYWQoZHQuZ2V0TW9udGgoKSArIDEsIDIpO1xuICAgICAgICAgICAgY29uc3QgZGF5ICAgID0gVGV4dFV0aWxzLnplcm9QYWQoZHQuZ2V0RGF0ZSgpLCAyKTtcbiAgICAgICAgICAgIGNvbnN0IGhvdXIgICA9IFRleHRVdGlscy56ZXJvUGFkKGR0LmdldEhvdXJzKCksIDIpO1xuICAgICAgICAgICAgY29uc3QgbWludXRlID0gVGV4dFV0aWxzLnplcm9QYWQoZHQuZ2V0TWludXRlcygpLCAyKTtcbiAgICAgICAgICAgIGNvbnN0IHNlY29uZCA9IFRleHRVdGlscy56ZXJvUGFkKGR0LmdldFNlY29uZHMoKSwgMik7XG4gICAgICAgICAgICBjb25zdCBtaWxsaXNlY29uZCA9IFRleHRVdGlscy56ZXJvUGFkKGR0LmdldE1pbGxpc2Vjb25kcygpLCAzKTtcbiAgICAgICAgICAgIC8vZm9ybWF0IHRpbWV6b25lXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAobmV3IERhdGUoKSkuZ2V0VGltZXpvbmVPZmZzZXQoKSxcbiAgICAgICAgICAgICAgICB0aW1lem9uZSA9IChvZmZzZXQ+PTAgPyAnKycgOiAnJykgKyBUZXh0VXRpbHMuemVyb1BhZChNYXRoLmZsb29yKG9mZnNldC82MCksMikgKyAnOicgKyBUZXh0VXRpbHMuemVyb1BhZChvZmZzZXQlNjAsMik7XG4gICAgICAgICAgICByZXR1cm4gXCInXCIgKyB5ZWFyICsgJy0nICsgbW9udGggKyAnLScgKyBkYXkgKyAnICcgKyBob3VyICsgJzonICsgbWludXRlICsgJzonICsgc2Vjb25kICsgJy4nICsgbWlsbGlzZWNvbmQgKyB0aW1lem9uZSArIFwiJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godGhpcy5lc2NhcGVfKHgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKCcsJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHZhbC5yZXBsYWNlKC9bXFwwXFxuXFxyXFxiXFx0XFxcXCdcIlxceDFhXS9nLCBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcMFwiOiByZXR1cm4gXCJcXFxcMFwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxuXCI6IHJldHVybiBcIlxcXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXHJcIjogcmV0dXJuIFwiXFxcXHJcIjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcYlwiOiByZXR1cm4gXCJcXFxcYlwiO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFx0XCI6IHJldHVybiBcIlxcXFx0XCI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXHgxYVwiOiByZXR1cm4gXCJcXFxcWlwiO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gXCJcXFxcXCIrcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBcIidcIiArIHJlcyArIFwiJ1wiO1xuICAgICAgICB9XG4gICAgICAgIC8vb3RoZXJ3aXNlIGdldCB2YWx1ZU9mXG4gICAgICAgIGlmICh2YWwuaGFzT3duUHJvcGVydHkoXCIkbmFtZVwiKSlcbiAgICAgICAgICAgIHJldHVybiB2YWxbXCIkbmFtZVwiXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXNjYXBlXyh2YWwudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICB3aGVyZShuYW1lOnN0cmluZyk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIEFyZ3Mubm90RW1wdHkobmFtZSxcIkxlZnQgb3BlcmFuZFwiKTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ubGVmdCA9IG5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZChuYW1lOnN0cmluZyk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIEFyZ3Mubm90RW1wdHkobmFtZSxcIkxlZnQgb3BlcmFuZFwiKTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ubGVmdCA9IG5hbWU7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLmxvcCA9IFwiYW5kXCI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZEFsc28obmFtZTpzdHJpbmcpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KG5hbWUsXCJMZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLmxlZnQgPSBuYW1lO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sb3AgPSBcImFuZFwiO1xuICAgICAgICBpZiAoIVRleHRVdGlscy5pc051bGxPclVuZGVmaW5lZCh0aGlzLnBhcmFtc18uJGZpbHRlcikpIHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zXy4kZmlsdGVyID0gXCIoXCIgKyB0aGlzLnBhcmFtc18uJGZpbHRlciArIFwiKVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9yKG5hbWU6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3RFbXB0eShuYW1lLFwiTGVmdCBvcGVyYW5kXCIpO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gbmFtZTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ubG9wID0gXCJvclwiO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvckVsc2UobmFtZTpzdHJpbmcpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KG5hbWUsXCJMZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLmxlZnQgPSBuYW1lO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sb3AgPSBcIm9yXCI7XG4gICAgICAgIGlmICghVGV4dFV0aWxzLmlzTnVsbE9yVW5kZWZpbmVkKHRoaXMucGFyYW1zXy4kZmlsdGVyKSkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXNfLiRmaWx0ZXIgPSBcIihcIiArIHRoaXMucGFyYW1zXy4kZmlsdGVyICsgXCIpXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wYXJlXyhvcCwgdmFsdWUpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdE51bGwodGhpcy5wcml2YXRlc18ubGVmdCxcIlRoZSBsZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLm9wID0gb3A7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLnJpZ2h0ID0gdmFsdWU7IHJldHVybiB0aGlzLmFwcGVuZF8oKTtcbiAgICB9XG5cbiAgICBlcXVhbCh2YWx1ZTphbnkpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlXyhcImVxXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBub3RFcXVhbCh2YWx1ZTphbnkpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlXyhcIm5lXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBncmVhdGVyVGhhbih2YWx1ZTphbnkpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlXyhcImd0XCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBncmVhdGVyT3JFcXVhbCh2YWx1ZTphbnkpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlXyhcImdlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBsb3dlclRoYW4odmFsdWU6YW55KTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZV8oXCJsdFwiLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgbG93ZXJPckVxdWFsKHZhbHVlOmFueSk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVfKFwibGVcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZTJcbiAgICAgKiBAcmV0dXJucyB7Q2xpZW50RGF0YVF1ZXJ5YWJsZX1cbiAgICAgKi9cbiAgICBiZXR3ZWVuKHZhbHVlMTphbnksIHZhbHVlMjphbnkpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdE51bGwodGhpcy5wcml2YXRlc18ubGVmdCxcIlRoZSBsZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIC8vZ2VuZXJhdGUgbmV3IGZpbHRlclxuICAgICAgICBjb25zdCBzID0gQ2xpZW50RGF0YVF1ZXJ5YWJsZS5jcmVhdGUodGhpcy5nZXRNb2RlbCgpKVxuICAgICAgICAgICAgLndoZXJlKHRoaXMucHJpdmF0ZXNfLmxlZnQpLmdyZWF0ZXJPckVxdWFsKHZhbHVlMSlcbiAgICAgICAgICAgIC5hbmQodGhpcy5wcml2YXRlc18ubGVmdCkubG93ZXJPckVxdWFsKHZhbHVlMikudG9GaWx0ZXIoKTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ubG9wID0gdGhpcy5wcml2YXRlc18ubG9wIHx8IFwiYW5kXCI7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtc18uJGZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXNfLiRmaWx0ZXIgPSBcIihcIiArIHRoaXMucGFyYW1zXy4kZmlsdGVyICsgXCIpIFwiICsgdGhpcy5wcml2YXRlc18ubG9wICsgXCIgKFwiICsgcyArIFwiKVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXNfLiRmaWx0ZXIgPSBcIihcIiArIHMgKyBcIilcIjtcbiAgICAgICAgfVxuICAgICAgICAvL2NsZWFyIG9iamVjdFxuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gbnVsbDsgdGhpcy5wcml2YXRlc18ub3AgPSBudWxsOyB0aGlzLnByaXZhdGVzXy5yaWdodCA9IG51bGw7IHRoaXMucHJpdmF0ZXNfLmxvcCA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvRmlsdGVyKCk6c3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zXy4kZmlsdGVyO1xuICAgIH1cblxuICAgIGNvbnRhaW5zKHZhbHVlOmFueSk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIEFyZ3Mubm90TnVsbCh0aGlzLnByaXZhdGVzXy5sZWZ0LFwiVGhlIGxlZnQgb3BlcmFuZFwiKTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ub3AgPSAnZ2UnO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gVGV4dFV0aWxzLmZvcm1hdCgnaW5kZXhvZiglcywlcyknLCB0aGlzLnByaXZhdGVzXy5sZWZ0LCB0aGlzLmVzY2FwZV8odmFsdWUpKTtcbiAgICAgICAgdGhpcy5wcml2YXRlc18ucmlnaHQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRfKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZ2dyZWdhdGVfKGZuOnN0cmluZyk6IENsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdE51bGwodGhpcy5wcml2YXRlc18ubGVmdCxcIlRoZSBsZWZ0IG9wZXJhbmRcIik7XG4gICAgICAgIHRoaXMucHJpdmF0ZXNfLmxlZnQgPSBUZXh0VXRpbHMuZm9ybWF0KCclcyglcyknLCBmbiwgdGhpcy5wcml2YXRlc18ubGVmdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldERhdGUoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcImRhdGVcIik7XG4gICAgfVxuXG4gICAgZ2V0RGF5KCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJkYXlcIik7XG4gICAgfVxuXG4gICAgZ2V0TW9udGgoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcIm1vbnRoXCIpO1xuICAgIH1cblxuICAgIGdldFllYXIoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcInllYXJcIik7XG4gICAgfVxuXG4gICAgZ2V0RnVsbFllYXIoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcInllYXJcIik7XG4gICAgfVxuXG4gICAgZ2V0SG91cnMoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcImhvdXJcIik7XG4gICAgfVxuXG4gICAgZ2V0TWludXRlcygpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGVfKFwibWludXRlXCIpO1xuICAgIH1cblxuICAgIGdldFNlY29uZHMoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcInNlY29uZFwiKTtcbiAgICB9XG5cbiAgICBsZW5ndGgoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWdncmVnYXRlXyhcImxlbmd0aFwiKTtcbiAgICB9XG5cbiAgICB0cmltKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJ0cmltXCIpO1xuICAgIH1cblxuICAgIHRvTG9jYWxlTG93ZXJDYXNlKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJ0b2xvd2VyXCIpO1xuICAgIH1cblxuICAgIHRvTG93ZXJDYXNlKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJ0b2xvd2VyXCIpO1xuICAgIH1cblxuICAgIHRvTG9jYWxlVXBwZXJDYXNlKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJ0b3VwcGVyXCIpO1xuICAgIH1cblxuICAgIHRvVXBwZXJDYXNlKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJ0b3VwcGVyXCIpO1xuICAgIH1cblxuICAgIHJvdW5kKCk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFnZ3JlZ2F0ZV8oXCJyb3VuZFwiKTtcbiAgICB9XG5cbiAgICBmbG9vcigpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGVfKFwiZmxvb3JcIik7XG4gICAgfVxuXG4gICAgY2VpbCgpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5hZ2dyZWdhdGVfKFwiY2VpbGluZ1wiKTtcbiAgICB9XG5cbiAgICBpbmRleE9mKHM6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKHRoaXMucHJpdmF0ZXNfLmxlZnQsXCJUaGUgbGVmdCBvcGVyYW5kXCIpO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gVGV4dFV0aWxzLmZvcm1hdCgnaW5kZXhvZiglcywlcyknLCB0aGlzLnByaXZhdGVzXy5sZWZ0LCB0aGlzLmVzY2FwZV8ocykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdWJzdHIocG9zOm51bWJlcixsZW5ndGg6bnVtYmVyKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKHRoaXMucHJpdmF0ZXNfLmxlZnQsXCJUaGUgbGVmdCBvcGVyYW5kXCIpO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gVGV4dFV0aWxzLmZvcm1hdCgnc3Vic3RyaW5nKCVzLCVzLCVzKScsdGhpcy5wcml2YXRlc18ubGVmdCwgcG9zLCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGFydHNXaXRoKHM6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKHRoaXMucHJpdmF0ZXNfLmxlZnQsXCJUaGUgbGVmdCBvcGVyYW5kXCIpO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gVGV4dFV0aWxzLmZvcm1hdCgnc3RhcnRzd2l0aCglcywlcyknLHRoaXMucHJpdmF0ZXNfLmxlZnQsIHRoaXMuZXNjYXBlXyhzKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGVuZHNXaXRoKHM6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKHRoaXMucHJpdmF0ZXNfLmxlZnQsXCJUaGUgbGVmdCBvcGVyYW5kXCIpO1xuICAgICAgICB0aGlzLnByaXZhdGVzXy5sZWZ0ID0gVGV4dFV0aWxzLmZvcm1hdCgnZW5kc3dpdGgoJXMsJXMpJyx0aGlzLnByaXZhdGVzXy5sZWZ0LCB0aGlzLmVzY2FwZV8ocykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZWxlY3QoLi4uYXR0cjpzdHJpbmdbXSk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIEFyZ3Mubm90TnVsbChhdHRyLCBcIkF0dHJpYnV0ZXNcIik7XG4gICAgICAgIEFyZ3MuY2hlY2soYXR0ci5sZW5ndGg+MCxcIkF0dHJpYnV0ZXMgbWF5IG5vdCBiZSBlbXB0eVwiKTtcbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgQXJncy5jaGVjayh0eXBlb2YgYXR0cltpXSA9PT0gXCJzdHJpbmdcIiwgXCJJbnZhbGlkIGF0dHJpYnV0ZS4gRXhwZWN0ZWQgc3RyaW5nLlwiKTtcbiAgICAgICAgICAgIGFyci5wdXNoKGF0dHJbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyYW1zXy4kc2VsZWN0ID0gYXJyLmpvaW4oXCIsXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBncm91cEJ5KC4uLmF0dHI6c3RyaW5nW10pOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdE51bGwoYXR0ciwgXCJBdHRyaWJ1dGVzXCIpO1xuICAgICAgICBBcmdzLmNoZWNrKGF0dHIubGVuZ3RoPjAsXCJBdHRyaWJ1dGVzIG1heSBub3QgYmUgZW1wdHlcIik7XG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIEFyZ3MuY2hlY2sodHlwZW9mIGF0dHJbaV0gPT09IFwic3RyaW5nXCIsIFwiSW52YWxpZCBhdHRyaWJ1dGUuIEV4cGVjdGVkIHN0cmluZy5cIik7XG4gICAgICAgICAgICBhcnIucHVzaChhdHRyW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFtc18uJGdyb3VwYnkgPSBhcnIuam9pbihcIixcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGV4cGFuZCguLi5hdHRyOnN0cmluZ1tdKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3ROdWxsKGF0dHIsIFwiQXR0cmlidXRlc1wiKTtcbiAgICAgICAgQXJncy5jaGVjayhhdHRyLmxlbmd0aD4wLFwiQXR0cmlidXRlcyBtYXkgbm90IGJlIGVtcHR5XCIpO1xuICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBBcmdzLmNoZWNrKHR5cGVvZiBhdHRyW2ldID09PSBcInN0cmluZ1wiLCBcIkludmFsaWQgYXR0cmlidXRlLiBFeHBlY3RlZCBzdHJpbmcuXCIpO1xuICAgICAgICAgICAgYXJyLnB1c2goYXR0cltpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJhbXNfLiRleHBhbmQgPSBhcnIuam9pbihcIixcIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9yZGVyQnkoYXR0cjpzdHJpbmcpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KGF0dHIsXCJPcmRlciBieSBhdHRyaWJ1dGVcIik7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kb3JkZXJieSA9IGF0dHIudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhlbkJ5KGF0dHI6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3RFbXB0eShhdHRyLFwiT3JkZXIgYnkgYXR0cmlidXRlXCIpO1xuICAgICAgICB0aGlzLnBhcmFtc18uJG9yZGVyYnkgKz0gKHRoaXMucGFyYW1zXy4kb3JkZXJieSA/ICcsJyArIGF0dHIudG9TdHJpbmcoKSA6IGF0dHIudG9TdHJpbmcoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9yZGVyQnlEZXNjZW5kaW5nKGF0dHI6c3RyaW5nKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5ub3RFbXB0eShhdHRyLFwiT3JkZXIgYnkgYXR0cmlidXRlXCIpO1xuICAgICAgICB0aGlzLnBhcmFtc18uJG9yZGVyYnkgPSBhdHRyLnRvU3RyaW5nKCkgKyBcIiBkZXNjXCI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoZW5CeURlc2NlbmRpbmcoYXR0cjpzdHJpbmcpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KGF0dHIsXCJPcmRlciBieSBhdHRyaWJ1dGVcIik7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kb3JkZXJieSArPSAodGhpcy5wYXJhbXNfLiRvcmRlcmJ5ID8gJywnICsgYXR0ci50b1N0cmluZygpIDogYXR0ci50b1N0cmluZygpKSArIFwiIGRlc2NcIjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2tpcChudW06bnVtYmVyKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgdGhpcy5wYXJhbXNfLiRza2lwID0gbnVtO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0YWtlKG51bTpudW1iZXIpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICB0aGlzLnBhcmFtc18uJHRvcCA9IG51bTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZmlyc3QoKTpQcm9taXNlPGFueT4ge1xuICAgICAgICBkZWxldGUgdGhpcy5wYXJhbXNfLiR0b3A7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcmFtc18uJHNraXA7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcmFtc18uJGNvdW50O1xuICAgICAgICB0aGlzLnBhcmFtc18uJGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZSgpLmV4ZWN1dGUoe1xuICAgICAgICAgICAgbWV0aG9kOlwiR0VUXCIsXG4gICAgICAgICAgICB1cmw6dGhpcy5nZXRVcmwoKSxcbiAgICAgICAgICAgIGRhdGE6dGhpcy5wYXJhbXNfLFxuICAgICAgICAgICAgaGVhZGVyczpbXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsaXN0KCk6UHJvbWlzZTxhbnk+IHtcbiAgICAgICAgZGVsZXRlIHRoaXMucGFyYW1zXy4kZmlyc3Q7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kY291bnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTZXJ2aWNlKCkuZXhlY3V0ZSh7XG4gICAgICAgICAgICBtZXRob2Q6XCJHRVRcIixcbiAgICAgICAgICAgIHVybDp0aGlzLmdldFVybCgpLFxuICAgICAgICAgICAgZGF0YTp0aGlzLnBhcmFtc18sXG4gICAgICAgICAgICBoZWFkZXJzOnt9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGl0ZW0oKTpQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maXJzdCgpO1xuICAgIH1cblxuICAgIGdldEl0ZW0oKTpQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maXJzdCgpO1xuICAgIH1cblxuICAgIGl0ZW1zKCk6UHJvbWlzZTxhbnk+IHtcbiAgICAgICAgZGVsZXRlIHRoaXMucGFyYW1zXy4kZmlyc3Q7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kY291bnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZSgpLmV4ZWN1dGUoe1xuICAgICAgICAgICAgbWV0aG9kOlwiR0VUXCIsXG4gICAgICAgICAgICB1cmw6dGhpcy5nZXRVcmwoKSxcbiAgICAgICAgICAgIGRhdGE6dGhpcy5wYXJhbXNfLFxuICAgICAgICAgICAgaGVhZGVyczp7fVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpOlByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zKCk7XG4gICAgfVxuXG4gICAgZ2V0TGlzdCgpOlByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3QoKTtcbiAgICB9XG5cbiAgICBmaWx0ZXIoczpzdHJpbmcpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KFwic1wiLFwiRmlsdGVyIGV4cHJlc3Npb25cIik7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kZmlsdGVyID0gcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGV2ZWxzKG46bnVtYmVyKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5Qb3NpdGl2ZShuLCAnTGV2ZWxzJyk7XG4gICAgICAgIHRoaXMucGFyYW1zXy4kbGV2ZWxzID0gbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBjbGFzcyBDbGllbnREYXRhTW9kZWwge1xuXG4gICAgcHJpdmF0ZSBuYW1lXzpzdHJpbmc7XG4gICAgcHJpdmF0ZSB1cmxfOnN0cmluZztcbiAgICBwcml2YXRlIHNlcnZpY2VfOkNsaWVudERhdGFTZXJ2aWNlQmFzZTtcbiAgICBwcml2YXRlIGhhc05hdmlnYXRpb25MaW5rRnVuYzpGdW5jdGlvbjtcbiAgICBwcml2YXRlIGhhc1JlYWRMaW5rRnVuYzpGdW5jdGlvbjtcbiAgICBwcml2YXRlIGhhc0VkaXRMaW5rRnVuYzpGdW5jdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihuYW1lOnN0cmluZywgc2VydmljZTpDbGllbnREYXRhU2VydmljZUJhc2UpIHtcbiAgICAgICAgdGhpcy5uYW1lXyA9IG5hbWU7XG4gICAgICAgIHRoaXMuc2VydmljZV8gPSBzZXJ2aWNlO1xuICAgICAgICB0aGlzLmhhc05hdmlnYXRpb25MaW5rRnVuYyA9ICgpPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFRleHRVdGlscy5mb3JtYXQoXCIlcy9pbmRleC5qc29uXCIsIHRoaXMuZ2V0TmFtZSgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYXNSZWFkTGlua0Z1bmMgPSAoaWQ6YW55KT0+IHtcbiAgICAgICAgICAgIHJldHVybiBUZXh0VXRpbHMuZm9ybWF0KFwiJXMvJXMvaW5kZXguanNvblwiLCB0aGlzLmdldE5hbWUoKSwgaWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhc0VkaXRMaW5rRnVuYyA9IChpZDphbnkpPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFRleHRVdGlscy5mb3JtYXQoXCIlcy8lcy9pbmRleC5qc29uXCIsIHRoaXMuZ2V0TmFtZSgpLCBpZCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaGFzTmF2aWdhdGlvbkxpbmsoZnVuYzogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5oYXNOYXZpZ2F0aW9uTGlua0Z1bmMgPSBmdW5jO1xuICAgIH1cblxuICAgIGhhc0VkaXRMaW5rKGZ1bmM6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuaGFzRWRpdExpbmtGdW5jID0gZnVuYztcbiAgICB9XG5cbiAgICBoYXNSZWFkTGluayhmdW5jOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmhhc1JlYWRMaW5rRnVuYyA9IGZ1bmM7XG4gICAgfVxuXG4gICAgZ2V0TmF2aWdhdGlvbkxpbmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc05hdmlnYXRpb25MaW5rRnVuYygpO1xuICAgIH1cblxuICAgIGdldFJlYWRMaW5rKGlkOmFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNSZWFkTGlua0Z1bmMoaWQpO1xuICAgIH1cblxuICAgIGdldEVkaXRMaW5rKGlkOmFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNFZGl0TGlua0Z1bmMoaWQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0NsaWVudERhdGFTZXJ2aWNlQmFzZX1cbiAgICAgKi9cbiAgICBnZXRTZXJ2aWNlKCk6IENsaWVudERhdGFTZXJ2aWNlQmFzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VfO1xuICAgIH1cblxuICAgIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XG4gICAgfVxuXG4gICAgYXNRdWVyeWFibGUoKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgcmV0dXJuIENsaWVudERhdGFRdWVyeWFibGUuY3JlYXRlKHRoaXMuZ2V0TmFtZSgpLCB0aGlzLnNlcnZpY2VfKTtcbiAgICB9XG5cbiAgICB3aGVyZShhdHRyOnN0cmluZyk6Q2xpZW50RGF0YVF1ZXJ5YWJsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzUXVlcnlhYmxlKCkud2hlcmUoYXR0cik7XG4gICAgfVxuXG4gICAgc2VsZWN0KC4uLmF0dHI6c3RyaW5nW10pOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICBjb25zdCBxID0gdGhpcy5hc1F1ZXJ5YWJsZSgpO1xuICAgICAgICByZXR1cm4gcS5zZWxlY3QuYXBwbHkocSxhdHRyKTtcbiAgICB9XG5cbiAgICBza2lwKG51bTpudW1iZXIpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5hc1F1ZXJ5YWJsZSgpLnNraXAobnVtKTtcbiAgICB9XG5cbiAgICB0YWtlKG51bTpudW1iZXIpOkNsaWVudERhdGFRdWVyeWFibGUge1xuICAgICAgICByZXR1cm4gdGhpcy5hc1F1ZXJ5YWJsZSgpLnRha2UobnVtKTtcbiAgICB9XG5cbiAgICBzYXZlKG9iajphbnkpOlByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlcnZpY2UoKS5leGVjdXRlKHtcbiAgICAgICAgICAgIG1ldGhvZDpcIlBPU1RcIixcbiAgICAgICAgICAgIHVybDpUZXh0VXRpbHMuZm9ybWF0KFwiJXMvaW5kZXguanNvblwiLCB0aGlzLmdldE5hbWUoKSksXG4gICAgICAgICAgICBkYXRhOm9iaixcbiAgICAgICAgICAgIGhlYWRlcnM6e31cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2NoZW1hKCk6UHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZSgpLmV4ZWN1dGUoeyBtZXRob2Q6XCJHRVRcIixcbiAgICAgICAgICAgIHVybDpUZXh0VXRpbHMuZm9ybWF0KFwiJXMvc2NoZW1hLmpzb25cIiwgdGhpcy5nZXROYW1lKCkpLFxuICAgICAgICAgICAgZGF0YTpudWxsLFxuICAgICAgICAgICAgaGVhZGVyczp7fVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmUob2JqOmFueSk6UHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VydmljZSgpLmV4ZWN1dGUoeyBtZXRob2Q6XCJERUxFVEVcIixcbiAgICAgICAgICAgIHVybDpUZXh0VXRpbHMuZm9ybWF0KFwiJXMvaW5kZXguanNvblwiLCB0aGlzLmdldE5hbWUoKSksXG4gICAgICAgICAgICBkYXRhOm9iaixcbiAgICAgICAgICAgIGhlYWRlcnM6e31cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV2ZWxzKG46bnVtYmVyKTpDbGllbnREYXRhUXVlcnlhYmxlIHtcbiAgICAgICAgQXJncy5Qb3NpdGl2ZShuLCAnTGV2ZWxzJyk7XG4gICAgICAgIHJldHVybiB0aGlzLmFzUXVlcnlhYmxlKCkubGV2ZWxzKG4pO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgQ2xpZW50RGF0YUNvbnRleHQgaW1wbGVtZW50cyBDbGllbnREYXRhQ29udGV4dEJhc2Uge1xuXG4gICAgcHJpdmF0ZSBzZXJ2aWNlXzpDbGllbnREYXRhU2VydmljZUJhc2U7XG4gICAgcHJpdmF0ZSBiYXNlXzpzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlIDogQ2xpZW50RGF0YVNlcnZpY2VCYXNlKSB7XG4gICAgICAgIHRoaXMuc2VydmljZV8gPSBzZXJ2aWNlO1xuICAgIH1cblxuICAgIHNldEJhc2ljQXV0aG9yaXphdGlvbiAodXNlcm5hbWU6c3RyaW5nLCBwYXNzd29yZDpzdHJpbmcpOkNsaWVudERhdGFDb250ZXh0IHtcbiAgICAgICAgdGhpcy5nZXRTZXJ2aWNlKCkuc2V0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJhc2ljIFwiICsgVGV4dFV0aWxzLnRvQmFzZTY0KHVzZXJuYW1lICsgXCI6XCIgKyBwYXNzd29yZCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRCZWFyZXJBdXRob3JpemF0aW9uIChhY2Nlc3NfdG9rZW46IHN0cmluZyk6Q2xpZW50RGF0YUNvbnRleHQge1xuICAgICAgICB0aGlzLmdldFNlcnZpY2UoKS5zZXRIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyB3aGljaCByZXByZXNlbnRzIHRoZSBiYXNlIFVSTCBvZiB0aGUgTU9TVCBXZWIgQXBwbGljYXRpb24gU2VydmVyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0QmFzZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlXztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgc3RyaW5nIHdoaWNoIHJlcHJlc2VudHMgdGhlIGJhc2UgVVJMIG9mIHRoZSBNT1NUIFdlYiBBcHBsaWNhdGlvbiBTZXJ2ZXIuXG4gICAgICovXG4gICAgc2V0QmFzZSh2YWx1ZTpzdHJpbmcpOkNsaWVudERhdGFDb250ZXh0QmFzZSB7XG4gICAgICAgIEFyZ3Mubm90RW1wdHkodmFsdWUsXCJCYXNlIFVSTFwiKTtcbiAgICAgICAgdGhpcy5iYXNlXyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbnN0YW5jZSBvZiBDbGllbnREYXRhU2VydmljZSBjbGFzcyB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBkYXRhIGNvbnRleHQuXG4gICAgICogQHJldHVybnMge0NsaWVudERhdGFTZXJ2aWNlQmFzZX1cbiAgICAgKi9cbiAgICBnZXRTZXJ2aWNlKCk6IENsaWVudERhdGFTZXJ2aWNlQmFzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2VfO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgQ2xpZW50RGF0YU1vZGVsIGNsYXNzXG4gICAgICogQHBhcmFtIG5hbWUgLSBBIHN0cmluZyB3aGljaCByZXByZXNlbnRzIHRoZSBuYW1lIG9mIHRoZSBkYXRhIG1vZGVsLlxuICAgICAqIEByZXR1cm5zIHtDbGllbnREYXRhTW9kZWx9XG4gICAgICovXG4gICAgbW9kZWwobmFtZTpzdHJpbmcpOiBDbGllbnREYXRhTW9kZWwge1xuICAgICAgICBBcmdzLm5vdEVtcHR5KG5hbWUsXCJNb2RlbCBuYW1lXCIpO1xuICAgICAgICByZXR1cm4gbmV3IENsaWVudERhdGFNb2RlbChuYW1lLCB0aGlzLmdldFNlcnZpY2UoKSk7XG4gICAgfVxuXG5cbn1cblxuZXhwb3J0IGNsYXNzIENsaWVudERhdGFTZXJ2aWNlIGltcGxlbWVudHMgQ2xpZW50RGF0YVNlcnZpY2VCYXNlIHtcblxuXG4gICAgcHJpdmF0ZSBiYXNlXzpzdHJpbmc7XG4gICAgcHJpdmF0ZSBoZWFkZXJzXzogYW55O1xuXG4gICAgY29uc3RydWN0b3IoYmFzZTpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzXyA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIGJhc2UgPT09ICd1bmRlZmluZWQnIHx8IGJhc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5iYXNlXyA9IFwiL1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iYXNlXyA9IGJhc2U7XG4gICAgICAgICAgICBpZiAoIS9cXC8kLy50ZXN0KHRoaXMuYmFzZV8pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlXyArPSBcIi9cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SGVhZGVyKG5hbWU6c3RyaW5nLCB2YWx1ZTpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzX1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldEhlYWRlcnMoKTphbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJzXztcbiAgICB9XG5cbiAgICBnZXRCYXNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VfO1xuICAgIH1cblxuICAgIHJlc29sdmUocmVsYXRpdmU6IHN0cmluZykge1xuICAgICAgICBpZiAodHlwZW9mIHJlbGF0aXZlID09PSAnc3RyaW5nJyAmJiByZWxhdGl2ZS5sZW5ndGg+MCkge1xuICAgICAgICAgICAgaWYgKC9eXFwvLy50ZXN0KHJlbGF0aXZlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRCYXNlKCkgKyByZWxhdGl2ZS5zdWJzdHIoMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QmFzZSgpICsgcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQuIEV4cGVjdGVkIGEgbm90IGVtcHR5IHN0cmluZy5cIik7XG4gICAgfVxuXG5cbiAgICBleGVjdXRlKG9wdGlvbnM6IERhdGFTZXJ2aWNlRXhlY3V0ZU9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL21vZHVsZXMvQHRoZW1vc3QvY2xpZW50L2luZGV4LnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')}]);